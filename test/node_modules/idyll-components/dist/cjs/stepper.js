'use strict';

exports.__esModule = true;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _require = require('idyll-component-children'),
    filterChildren = _require.filterChildren,
    mapChildren = _require.mapChildren;

var Stepper = function (_React$PureComponent) {
  _inherits(Stepper, _React$PureComponent);

  function Stepper(props) {
    _classCallCheck(this, Stepper);

    var _this = _possibleConstructorReturn(this, _React$PureComponent.call(this, props));

    _this.SCROLL_STEP_MAP = {};
    _this.SCROLL_NAME_MAP = {};
    return _this;
  }

  Stepper.prototype.registerStep = function registerStep(elt, name, val) {
    this.SCROLL_STEP_MAP[elt] = val;
    this.SCROLL_NAME_MAP[elt] = name;
  };

  Stepper.prototype.getSteps = function getSteps() {
    return filterChildren(this.props.children || [], function (c) {
      return c.type.name && c.type.name.toLowerCase() === 'step';
    }) || [];
  };

  Stepper.prototype.next = function next() {
    this.props.updateProps({
      currentStep: (this.props.currentStep + 1) % this.getSteps().length
    });
  };

  Stepper.prototype.previous = function previous() {
    var newStep = this.props.currentStep - 1;
    if (newStep < 0) {
      newStep = this.getSteps().length + newStep;
    }

    this.props.updateProps({ currentStep: newStep });
  };

  Stepper.prototype.getSelectedStep = function getSelectedStep() {
    var _props = this.props,
        currentState = _props.currentState,
        currentStep = _props.currentStep;

    var steps = this.getSteps();
    if (currentState) {
      return filterChildren(steps, function (c) {
        return c.props.state === currentState;
      })[0];
    }
    return steps[currentStep % steps.length];
  };

  Stepper.prototype.render = function render() {
    var _this2 = this;

    var _props2 = this.props,
        children = _props2.children,
        height = _props2.height,
        props = _objectWithoutProperties(_props2, ['children', 'height']);

    return _react2.default.createElement(
      'div',
      {
        className: 'idyll-stepper',
        style: { position: 'relative', height: height }
      },
      _react2.default.createElement(
        'div',
        { className: 'idyll-step-graphic' },
        filterChildren(children, function (c) {
          return c.type.name && c.type.name.toLowerCase() === 'graphic';
        })
      ),
      _react2.default.createElement(
        'div',
        { className: 'idyll-step-content' },
        mapChildren(this.getSelectedStep(), function (c) {
          return _react2.default.cloneElement(c, {
            registerStep: _this2.registerStep.bind(_this2)
          });
        })
      ),
      mapChildren(filterChildren(children, function (c) {
        return c.type.name && c.type.name.toLowerCase() === 'steppercontrol';
      }), function (c) {
        return _react2.default.cloneElement(c, {
          next: _this2.next.bind(_this2),
          previous: _this2.previous.bind(_this2)
        });
      })
    );
  };

  return Stepper;
}(_react2.default.PureComponent);

Stepper.defaultProps = {
  currentStep: 0,
  height: 500
};

Stepper._idyll = {
  name: 'Stepper',
  tagType: 'open',
  children: ['\n[Step]This is the content for step 1[/Step]\n[Step]This is the content for step 2[/Step]\n[Step]This is the content for step 3[/Step]'],
  props: [{
    name: 'currentStep',
    type: 'number',
    example: '0',
    description: 'The index of the currently selected step.'
  }]
};
exports.default = Stepper;