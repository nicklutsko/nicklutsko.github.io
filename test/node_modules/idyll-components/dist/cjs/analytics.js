'use strict';

exports.__esModule = true;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Analytics = function (_React$PureComponent) {
  _inherits(Analytics, _React$PureComponent);

  function Analytics() {
    _classCallCheck(this, Analytics);

    return _possibleConstructorReturn(this, _React$PureComponent.apply(this, arguments));
  }

  Analytics.prototype.componentDidMount = function componentDidMount() {
    try {
      (function (i, s, o, g, r, a, m) {
        i['GoogleAnalyticsObject'] = r;
        i[r] = i[r] || function () {
          (i[r].q = i[r].q || []).push(arguments);
        }, i[r].l = 1 * new Date();
        a = s.createElement(o), m = s.getElementsByTagName(o)[0];
        a.async = 1;
        a.src = g;
        m.parentNode.insertBefore(a, m);
      })(window, document, 'script', 'https://www.google-analytics.com/analytics.js', 'ga');

      ga('create', this.props.google, 'auto');

      window.ga('send', 'pageview', {
        tag: this.props.tag
      });
    } catch (e) {
      console.log('Could not mount Analytics.');
    }
  };

  Analytics.prototype.render = function render() {
    return null;
  };

  return Analytics;
}(_react2.default.PureComponent);

Analytics._idyll = {
  name: 'Analytics',
  tagType: 'closed',
  props: [{
    name: 'google',
    type: 'string',
    example: '"UA-XXXXXXX"',
    defaultValue: 'none',
    description: 'The google analytics Identifier.'
  }]
};

exports.default = Analytics;