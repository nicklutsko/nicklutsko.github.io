'use strict';

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var React = require('react');

var Conditional = function (_React$Component) {
  _inherits(Conditional, _React$Component);

  function Conditional() {
    _classCallCheck(this, Conditional);

    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
  }

  Conditional.prototype.render = function render() {
    var _props = this.props,
        idyll = _props.idyll,
        hasError = _props.hasError,
        updateProps = _props.updateProps,
        props = _objectWithoutProperties(_props, ['idyll', 'hasError', 'updateProps']);

    if (!props.if) {
      return React.createElement(
        'div',
        { style: { display: 'none' } },
        props.children
      );
    }

    return React.createElement(
      'div',
      null,
      props.children
    );
  };

  return Conditional;
}(React.Component);

Conditional._idyll = {
  name: 'Conditional',
  tagType: 'open',
  children: ['Some text'],
  props: [{
    name: 'if',
    type: 'expression',
    example: '`x < 10`',
    description: 'An expression; if this evaluates to true, the children will be rendered, otherwise nothing will be drawn to the screen'
  }]
};
module.exports = Conditional;