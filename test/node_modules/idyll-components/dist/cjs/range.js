'use strict';

exports.__esModule = true;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Range = function (_React$PureComponent) {
  _inherits(Range, _React$PureComponent);

  function Range(props) {
    _classCallCheck(this, Range);

    return _possibleConstructorReturn(this, _React$PureComponent.call(this, props));
  }

  Range.prototype.handleChange = function handleChange(event) {
    this.props.updateProps({
      value: +event.target.value
    });
  };

  Range.prototype.render = function render() {
    var _props = this.props,
        value = _props.value,
        min = _props.min,
        max = _props.max,
        step = _props.step;

    return _react2.default.createElement('input', {
      type: 'range',
      onChange: this.handleChange.bind(this),
      value: value,
      min: min,
      max: max,
      step: step
    });
  };

  return Range;
}(_react2.default.PureComponent);

Range.defaultProps = {
  value: 0,
  min: 0,
  max: 1,
  step: 1
};

Range._idyll = {
  name: 'Range',
  tagType: 'closed',
  props: [{
    name: 'value',
    type: 'number',
    example: 'x',
    description: 'The value to display; if this is a variable, the variable will automatically be updated when the slider is moved.'
  }, {
    name: 'min',
    type: 'number',
    example: '0',
    description: 'The minimum value.'
  }, {
    name: 'max',
    type: 'number',
    example: '100',
    description: 'The maximum value.'
  }, {
    name: 'step',
    type: 'number',
    example: '1',
    defaultValue: '1',
    description: 'The granularity of the slider.'
  }]
};

exports.default = Range;