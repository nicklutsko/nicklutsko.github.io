'use strict';

exports.__esModule = true;

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var React = require('react');

var _require = require('idyll-component-children'),
    filterChildren = _require.filterChildren;

var Switch = function (_React$Component) {
  _inherits(Switch, _React$Component);

  function Switch() {
    _classCallCheck(this, Switch);

    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
  }

  Switch.prototype.render = function render() {
    var _props = this.props,
        idyll = _props.idyll,
        hasError = _props.hasError,
        updateProps = _props.updateProps,
        value = _props.value,
        children = _props.children,
        props = _objectWithoutProperties(_props, ['idyll', 'hasError', 'updateProps', 'value', 'children']);

    if (children) {
      var matchCase = function matchCase(child) {
        return child.type.name.toLowerCase() === 'case' && child.props.test === value;
      };
      var matchDefault = function matchDefault(child) {
        return child.type.name.toLowerCase() === 'default';
      };

      var matchedCase = filterChildren(children, matchCase);
      var defaultCase = filterChildren(children, matchDefault);

      return React.createElement(
        'div',
        null,
        matchedCase.length ? matchedCase : defaultCase
      );
    }
    return '';
  };

  return Switch;
}(React.Component);

Switch._idyll = {
  name: 'Switch',
  tagType: 'open',
  children: ['Case components'],
  props: [{
    name: 'value',
    type: 'variable',
    example: '1',
    description: 'Value of the child prop to render.'
  }]
};

exports.default = Switch;