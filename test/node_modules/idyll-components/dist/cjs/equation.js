'use strict';

exports.__esModule = true;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ReactDOM = require('react-dom');
var Latex = require('react-latex-patched');
var select = require('d3-selection').select;
var format = require('d3-format').format;

var allowedProps = ['domain', 'step', 'children'];

var Equation = function (_React$PureComponent) {
  _inherits(Equation, _React$PureComponent);

  function Equation(props) {
    _classCallCheck(this, Equation);

    var _this = _possibleConstructorReturn(this, _React$PureComponent.call(this, props));

    _this.state = {
      showRange: false
    };
    return _this;
  }

  Equation.prototype.handleChange = function handleChange(event) {
    this.props.updateProps({
      value: +event.target.value
    });
  };

  Equation.prototype.componentDidMount = function componentDidMount() {
    var dom = void 0;

    var cssId = 'idyll-equation-css'; // you could encode the css path itself to generate id..
    var cssURL = '//cdnjs.cloudflare.com/ajax/libs/KaTeX/0.9.0/katex.min.css';
    if (document && !document.getElementById(cssId) && !this.props.skipCSS && !select('link[href=\'' + cssURL + '\']').size()) {
      var heads = document.getElementsByTagName('head');
      if (heads.length) {
        var head = heads[0];
        var link = document.createElement('link');
        link.id = cssId;
        link.href = cssURL;
        link.rel = 'stylesheet';
        link.type = 'text/css';
        link.media = 'all';
        head.appendChild(link);
      }
    }

    try {
      dom = ReactDOM.findDOMNode(this);
    } catch (e) {}
    if (!dom) {
      return;
    }

    this.propNodes = {};
    var self = this;
    select(dom).selectAll('.mord').each(function (d) {
      var $this = select(this);
      Object.keys(self.props).filter(function (prop) {
        return allowedProps.indexOf(prop) === -1;
      }).forEach(function (prop) {
        if ($this.text() === prop) {
          self.propNodes[prop] = $this;
          $this.style('cursor', 'pointer');
          $this.on('mouseover', function () {
            $this.style('color', 'red');
          }).on('mouseout', function () {
            if (!(self.state.showRange && self.state.var === prop)) {
              $this.style('color', 'black');
            }
          }).on('click', function () {
            if (!(self.state.showRange && self.state.var === prop)) {
              self.setState({
                showRange: true,
                var: prop
              });
              $this.text(self.props[prop]);
              $this.style('color', 'red');
              Object.keys(self.propNodes).filter(function (d) {
                return d !== prop;
              }).forEach(function (d) {
                self.propNodes[d].text(d);
                self.propNodes[d].style('color', 'black');
              });
            } else {
              self.setState({
                showRange: false,
                var: prop
              });
              $this.style('color', 'black');
              $this.text(prop);
            }
          });
        }
      });
    });
  };

  Equation.prototype.handleRangeUpdate = function handleRangeUpdate(event) {
    var newProps = {};
    var val = +event.target.value;
    newProps[this.state.var] = val;
    this.props.updateProps(newProps);
    this.propNodes[this.state.var].text(val);
  };

  Equation.prototype.renderEditing = function renderEditing() {
    if (!this.state.showRange) {
      return null;
    }

    var d = (this.props.domain || {})[this.state.var] || [-10, 10];
    var step = (this.props.step || {})[this.state.var] || 0.1;
    return _react2.default.createElement(
      'div',
      { style: { paddingTop: 15, textAlign: 'center' } },
      _react2.default.createElement('input', {
        type: 'range',
        value: format('0.1f')(this.props[this.state.var]),
        min: d[0],
        max: d[1],
        onChange: this.handleRangeUpdate.bind(this),
        step: step
      })
    );
  };

  Equation.prototype.getLatex = function getLatex() {
    if (this.props.latex) {
      return this.props.latex;
    }
    return this.props.children && this.props.children[0] ? this.props.children[0] : '';
  };

  Equation.prototype.render = function render() {
    var latexChar = '$';
    var latexString = latexChar + this.getLatex() + latexChar;

    var style = void 0;
    if (this.state.showRange) {
      style = this.props.style;
    } else {
      style = Object.assign({
        display: this.props.display ? 'block' : 'inline-block'
      }, this.props.style);
    }

    return _react2.default.createElement(
      'span',
      { style: style },
      _react2.default.createElement(
        Latex,
        { displayMode: this.props.display },
        latexString
      ),
      this.renderEditing()
    );
  };

  return Equation;
}(_react2.default.PureComponent);

Equation._idyll = {
  name: 'Equation',
  tagType: 'open',
  children: 'y = x^2',
  props: [{
    name: 'display',
    type: 'boolean',
    example: 'true',
    defaultValue: 'false',
    description: 'Set to `true` for a centered, standalone equation, set to `false` for an inline equation.'
  }]
};

exports.default = Equation;