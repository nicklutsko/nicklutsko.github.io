'use strict';

exports.__esModule = true;

var _textContainer = require('./text-container');

var _textContainer2 = _interopRequireDefault(_textContainer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var React = require('react');

var _require = require('idyll-component-children'),
    filterChildren = _require.filterChildren,
    mapChildren = _require.mapChildren;

var d3 = require('d3-selection');

var styles = {
  SCROLL_GRAPHIC: {
    top: 0,
    left: 0,
    right: 0,
    bottom: 'auto',
    height: '100vh',
    width: '100%',
    transform: 'translate3d(0, 0, 0)',
    zIndex: -1
  },

  SCROLL_GRAPHIC_INNER: {
    position: 'absolute',
    // right: '1rem',
    left: 0,
    right: 0,
    top: '50%',
    transform: 'translateY(-50%)'
  }
};

var id = 0;

var Scroller = function (_React$Component) {
  _inherits(Scroller, _React$Component);

  function Scroller(props) {
    _classCallCheck(this, Scroller);

    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

    _this.id = id++;
    _this.state = {
      graphicHeight: 0,
      graphicWidth: 0
    };

    _this.SCROLL_STEP_MAP = {};
    _this.SCROLL_NAME_MAP = {};
    return _this;
  }

  Scroller.prototype.componentDidMount = function componentDidMount() {
    require('intersection-observer');
    var scrollama = require('scrollama');
    // instantiate the scrollama
    var scroller = scrollama();
    this.handleResize();

    // setup the instance, pass callback functions
    scroller.setup({
      step: '#idyll-scroll-' + this.id + ' .idyll-step', // required
      container: '#idyll-scroll-' + this.id, // required (for sticky)
      graphic: '#idyll-scroll-' + this.id + ' .idyll-scroll-graphic' // required (for sticky)
    }).onStepEnter(this.handleStepEnter.bind(this))
    // .onStepExit(handleStepExit)
    .onContainerEnter(this.handleContainerEnter.bind(this));
    //.onContainerExit(this.handleContainerExit.bind(this));

    // setup resize event
    window.addEventListener('resize', this.handleResize.bind(this));
  };

  Scroller.prototype.handleStepEnter = function handleStepEnter(_ref) {
    var element = _ref.element,
        index = _ref.index,
        direction = _ref.direction;

    this.SCROLL_STEP_MAP[index] && this.SCROLL_STEP_MAP[index]();
    var update = { currentStep: index };
    if (this.SCROLL_NAME_MAP[index]) {
      update.currentState = this.SCROLL_NAME_MAP[index];
    }
    this.props.updateProps && this.props.updateProps(update);
    if (index === Object.keys(this.SCROLL_STEP_MAP).length - 1) {
      d3.select('body').style('overflow', 'auto');
    }
  };

  Scroller.prototype.handleResize = function handleResize() {
    this.setState({
      graphicHeight: window.innerHeight + 'px',
      graphicWidth: window.innerWidth + 'px'
    });
  };

  Scroller.prototype.handleContainerEnter = function handleContainerEnter(response) {
    if (this.props.disableScroll && (!this.props.currentStep || this.props.currentStep < Object.keys(this.SCROLL_STEP_MAP).length - 1)) {
      d3.select('body').style('overflow', 'hidden');
    }
  };

  Scroller.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    var _this2 = this;

    if (nextProps.disableScroll && this.props.currentStep !== nextProps.currentStep) {
      d3.selectAll('#idyll-scroll-' + this.id + ' .idyll-step').filter(function (d, i) {
        return i === nextProps.currentStep;
      }).node().scrollIntoView({ behavior: 'smooth' });
    }
    if (nextProps.disableScroll && this.props.currentState !== nextProps.currentState) {
      d3.selectAll('#idyll-scroll-' + this.id + ' .idyll-step').filter(function (d, i) {
        return nextProps.currentState === _this2.SCROLL_NAME_MAP[i];
      }).node().scrollIntoView({ behavior: 'smooth' });
    }
    if (nextProps.disableScroll && (!nextProps.currentStep || nextProps.currentStep < Object.keys(this.SCROLL_STEP_MAP).length - 1)) {
      d3.select('body').style('overflow', 'hidden');
    }
  };

  Scroller.prototype.registerStep = function registerStep(elt, name, val) {
    this.SCROLL_STEP_MAP[elt] = val;
    this.SCROLL_NAME_MAP[elt] = name;
  };

  Scroller.prototype.render = function render() {
    var _this3 = this;

    var _props = this.props,
        hasError = _props.hasError,
        updateProps = _props.updateProps,
        idyll = _props.idyll,
        children = _props.children,
        props = _objectWithoutProperties(_props, ['hasError', 'updateProps', 'idyll', 'children']);

    var _state = this.state,
        graphicHeight = _state.graphicHeight,
        graphicWidth = _state.graphicWidth;


    var graphicChildren = filterChildren(children, function (c) {
      return c.type.name && c.type.name.toLowerCase() === 'graphic';
    });

    return React.createElement(
      'div',
      {
        ref: function ref(_ref2) {
          return _this3.ref = _ref2;
        },
        className: 'idyll-scroll',
        id: 'idyll-scroll-' + this.id,
        style: Object.assign({ position: 'relative' })
      },
      graphicChildren && graphicChildren.length ? React.createElement(
        'div',
        {
          className: 'idyll-scroll-graphic',
          style: Object.assign({ height: graphicHeight }, styles.SCROLL_GRAPHIC)
        },
        React.createElement(
          'div',
          {
            style: Object.assign({ width: graphicWidth }, styles.SCROLL_GRAPHIC_INNER)
          },
          graphicChildren
        )
      ) : null,
      React.createElement(
        _textContainer2.default,
        { idyll: idyll },
        React.createElement(
          'div',
          { className: 'idyll-scroll-text' },
          mapChildren(filterChildren(children, function (c) {
            return !c.type.name || c.type.name.toLowerCase() === 'step';
          }), function (c) {
            return React.cloneElement(c, {
              registerStep: _this3.registerStep.bind(_this3)
            });
          })
        )
      )
    );
  };

  return Scroller;
}(React.Component);

Scroller._idyll = {
  name: 'Scroller',
  tagType: 'open',
  children: ['\n  [Graphic] This graphic stays fixed in the background.[/Graphic]\n  [Step]This is the content for step 1[/Step]\n  [Step]This is the content for step 2[/Step]\n  [Step]This is the content for step 3[/Step]'],
  props: [{
    name: 'currentStep',
    type: 'integer',
    example: '0',
    description: 'The index of the currently selected step.'
  }, {
    name: 'currentState',
    type: 'object',
    example: '`{}`',
    description: 'The state value associated with the currently selected step. Note you must set the state property on the step components for this value to update.'
  }]
};

exports.default = Scroller;