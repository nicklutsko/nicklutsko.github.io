function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React from 'react';

var Aside = function (_React$PureComponent) {
  _inherits(Aside, _React$PureComponent);

  function Aside() {
    _classCallCheck(this, Aside);

    return _possibleConstructorReturn(this, _React$PureComponent.apply(this, arguments));
  }

  Aside.prototype.render = function render() {
    return React.createElement(
      'span',
      { className: 'aside-container' },
      React.createElement(
        'span',
        { className: 'aside' },
        this.props.children
      )
    );
  };

  return Aside;
}(React.PureComponent);

Aside._idyll = {
  name: 'Aside',
  tagType: 'open'
};

export default Aside;