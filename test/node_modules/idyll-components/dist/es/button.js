var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React from 'react';

var Button = function (_React$PureComponent) {
  _inherits(Button, _React$PureComponent);

  function Button() {
    _classCallCheck(this, Button);

    return _possibleConstructorReturn(this, _React$PureComponent.apply(this, arguments));
  }

  Button.prototype.render = function render() {
    var _props = this.props,
        onClick = _props.onClick,
        idyll = _props.idyll,
        hasError = _props.hasError,
        updateProps = _props.updateProps,
        props = _objectWithoutProperties(_props, ['onClick', 'idyll', 'hasError', 'updateProps']);

    return React.createElement(
      'button',
      _extends({}, props, { onClick: onClick.bind(this) }),
      this.props.children
    );
  };

  return Button;
}(React.PureComponent);

Button.defaultProps = {
  onClick: function onClick() {}
};

Button._idyll = {
  name: 'Button',
  tagType: 'open',
  children: ['Click Me.'],
  props: [{
    name: 'onClick',
    type: 'event',
    example: '`x += 1`',
    description: 'An event that is fired when the user clicks the button.'
  }]
};
export default Button;