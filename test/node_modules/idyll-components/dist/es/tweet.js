function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component, createRef } from 'react';
import PropTypes from 'prop-types';

var Tweet = function (_Component) {
  _inherits(Tweet, _Component);

  function Tweet(props) {
    _classCallCheck(this, Tweet);

    var _this = _possibleConstructorReturn(this, _Component.call(this, props));

    _this.state = {
      loading: true,
      loadingMessage: 'Loading tweet ...'
    };
    _this.tweetContainer = createRef();
    _this.loadTweet = _this.loadTweet.bind(_this);
    return _this;
  }

  Tweet.prototype.isTwttrReady = function isTwttrReady() {
    return !!window['twttr'];
  };

  Tweet.prototype.loadTwttr = function loadTwttr() {
    return new Promise(function (resolve, reject) {
      var twttrEl = document.createElement('script');
      twttrEl.setAttribute('src', document.location.protocol + '//platform.twitter.com/widgets.js');
      twttrEl.onload = function () {
        return resolve();
      };
      twttrEl.onerror = function (error) {
        return reject(error);
      };
      (document.head || document.body || { appendChild: function appendChild() {} }).appendChild(twttrEl);
    });
  };

  Tweet.prototype.loadTweet = function loadTweet() {
    var twttr = window['twttr'];
    var _props = this.props,
        id = _props.id,
        parameters = _props.parameters;


    twttr.widgets.createTweet(id, this.tweetContainer.current, parameters);

    this.setState({ loading: false });
  };

  Tweet.prototype.componentDidMount = function componentDidMount() {
    var _this2 = this;

    if (this.isTwttrReady()) {
      this.loadTweet();
    } else {
      var loadingMessage = 'Error loading tweet ' + this.props.id;
      this.loadTwttr().then(this.loadTweet).catch(function () {
        return _this2.setState({ loadingMessage: loadingMessage });
      });
    }
  };

  Tweet.prototype.render = function render() {
    var _state = this.state,
        loading = _state.loading,
        loadingMessage = _state.loadingMessage;


    return React.createElement(
      'div',
      { ref: this.tweetContainer },
      loading && loadingMessage
    );
  };

  return Tweet;
}(Component);

Tweet.propTypes = {
  id: PropTypes.string, //Tweet id can be found via url, e.g https://twitter.com/user/status/id
  parameters: PropTypes.object //https://developer.twitter.com/en/docs/twitter-for-websites/embedded-tweets/guides/embedded-tweet-parameter-reference
};

Tweet._idyll = {
  name: 'Tweet',
  tagType: 'closed',
  props: [{
    name: 'id',
    type: 'string',
    example: '"1123077742466031616"',
    description: 'The ID of the Tweet, found in the URL after /status/. Required.'
  }, {
    name: 'parameters',
    type: 'object',
    example: '{linkColor: "#8342f4"}',
    description: 'Embedded tweet params. See https://developer.twitter.com/en/docs/twitter-for-websites/embedded-tweets/guides/embedded-tweet-parameter-reference. Optional'
  }]
};

export default Tweet;