var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React from 'react';

var Link = function (_React$PureComponent) {
  _inherits(Link, _React$PureComponent);

  function Link(props) {
    _classCallCheck(this, Link);

    return _possibleConstructorReturn(this, _React$PureComponent.call(this, props));
  }

  Link.prototype.render = function render() {
    var _props = this.props,
        idyll = _props.idyll,
        hasError = _props.hasError,
        updateProps = _props.updateProps,
        props = _objectWithoutProperties(_props, ['idyll', 'hasError', 'updateProps']);

    var passProps = _extends({}, props);
    if (passProps.url) {
      passProps.href = passProps.url;
    }
    return React.createElement(
      'a',
      passProps,
      props.text || props.children
    );
  };

  return Link;
}(React.PureComponent);

Link._idyll = {
  name: 'Link',
  tagType: 'closed',
  displayType: 'inline',
  props: [{
    name: 'text',
    type: 'string',
    example: '"Link Text"',
    description: 'The text to display'
  }, {
    name: 'url',
    type: 'string',
    example: '"https://some.url/"',
    description: 'The URL to open when the link is clicked'
  }]
};

export default Link;