var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React from 'react';
var V = require('victory');
var d3Arr = require('d3-array');

var types = {
  AREA: V.VictoryArea,
  TIME: V.VictoryLine,
  LINE: V.VictoryLine,
  BAR: V.VictoryBar,
  SCATTER: V.VictoryScatter,
  PIE: V.VictoryPie
};

var chartCount = 0;

var Chart = function (_React$PureComponent) {
  _inherits(Chart, _React$PureComponent);

  function Chart(props) {
    _classCallCheck(this, Chart);

    var _this = _possibleConstructorReturn(this, _React$PureComponent.call(this, props));

    _this.id = chartCount++;
    return _this;
  }

  Chart.prototype.render = function render() {
    var id = this.id,
        props = this.props;

    var type = props.type.toUpperCase();
    var INNER_CHART = types[type];

    var scale = props.scale,
        data = props.data,
        domain = props.domain,
        range = props.range,
        _props$domainPadding = props.domainPadding,
        domainPadding = _props$domainPadding === undefined ? 10 : _props$domainPadding,
        animate = props.animate,
        _props$theme = props.theme,
        theme = _props$theme === undefined ? 'grayscale' : _props$theme,
        customProps = _objectWithoutProperties(props, ['scale', 'data', 'domain', 'range', 'domainPadding', 'animate', 'theme']);

    if (typeof theme === 'string') {
      theme = V.VictoryTheme[theme];
    }

    if (props.equation) {
      var d = domain;
      data = d3Arr.range(d[0], d[1], (d[1] - d[0]) / props.samplePoints).map(function (x) {
        try {
          return {
            x: x,
            y: props.equation(x)
          };
        } catch (err) {
          return {
            x: x,
            y: 0
          };
        }
      });
    }

    if (type === types.TIME) {
      scale = { x: 'time', y: 'linear' };
      data = data.map(function (d) {
        return Object.assign({}, d, {
          x: new Date(d.x)
        });
      });
    }

    var formattedRange = { domain: { x: domain, y: range } };

    return React.createElement(
      'div',
      { className: props.className },
      type !== 'PIE' ? React.createElement(
        V.VictoryChart,
        _extends({
          domainPadding: domainPadding
        }, formattedRange, {
          animate: animate,
          scale: scale,
          containerId: 'container-' + id,
          clipId: 'clip-' + id,
          theme: theme
        }),
        React.createElement(INNER_CHART, _extends({ data: data, x: props.x, y: props.y }, customProps))
      ) : React.createElement(INNER_CHART, { data: data, colorScale: props.colorScale })
    );
  };

  return Chart;
}(React.PureComponent);

Chart.defaultProps = {
  domain: [-1, 1],
  range: [-1, 1],
  domainPadding: 0,
  samplePoints: 100,
  type: 'line'
};

Chart._idyll = {
  name: 'Chart',
  tagType: 'closed',
  props: [{
    name: 'type',
    type: 'string',
    example: '"scatter"',
    defaultValue: "'line'",
    description: 'The type of the chart to display, can be `line`, `scatter`, `bar`, `pie`, or `time`. The time type is a line chart that expects the `x` values in the data to be in the temporal domain.'
  }, {
    name: 'data',
    type: 'array',
    example: '`[{x: 1, y: 1}, { x: 2, y: 2 }]`',
    description: 'A JSON object containing the data for this chart. It uses the [victory](https://formidable.com/open-source/victory/docs) library to handle rendering, so see those docs for more information on what types of data can be passed in.'
  }, {
    name: 'x',
    type: 'string',
    example: '"year"',
    defaultValue: '"x"',
    description: 'The data property to be used for the `x` dimension.'
  }, {
    name: 'y',
    type: 'string',
    example: '"value"',
    defaultValue: '"y"',
    description: 'The data property to be used for the `y` dimension.'
  }, {
    name: 'domain',
    type: 'array',
    example: '`[0, 1]`',
    defaultValue: '`[0, 1]`',
    description: 'The chart extent along the x dimension.'
  }, {
    name: 'range',
    type: 'array',
    example: '`[0, 1]`',
    defaultValue: '`[0, 1]`',
    description: 'The chart extent along the y dimension.'
  }, {
    name: 'theme',
    type: 'string',
    example: "'material'",
    defaultValue: "'grayscale'",
    description: 'The theme to use, e.g. `grayscale` or `material` or a custom object (see [an example here](https://github.com/FormidableLabs/victory/blob/master/packages/victory-core/src/victory-theme/grayscale.js))'
  }]
};

export default Chart;