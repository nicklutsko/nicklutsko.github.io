function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React from 'react';
var PropTypes = require('prop-types');

var EmbeddedGist = function (_React$PureComponent) {
  _inherits(EmbeddedGist, _React$PureComponent);

  function EmbeddedGist(props) {
    _classCallCheck(this, EmbeddedGist);

    var _this = _possibleConstructorReturn(this, _React$PureComponent.call(this, props));

    _this.gist = props.gist;
    _this.file = props.file;
    _this.stylesheetAdded = false;
    _this.state = {
      loading: true,
      src: ''
    };
    return _this;
  }

  // The Gist JSON data includes a stylesheet to add to the page
  // to make it look correct. `addStylesheet` ensures we only add
  // the stylesheet one time.


  EmbeddedGist.prototype.addStylesheet = function addStylesheet(href) {
    if (!this.stylesheetAdded) {
      this.stylesheetAdded = true;
      var link = document.createElement('link');
      link.type = 'text/css';
      link.rel = 'stylesheet';
      link.href = href;

      (document.head || document.body || { appendChild: function appendChild() {} }).appendChild(link);
    }
  };

  EmbeddedGist.prototype.componentDidMount = function componentDidMount() {
    // Create a JSONP callback that will set our state
    // with the data that comes back from the Gist site
    var gistCallback = EmbeddedGist.nextGistCallback();
    window[gistCallback] = function (gist) {
      this.setState({
        loading: false,
        src: gist.div
      });
      this.addStylesheet(gist.stylesheet);
    }.bind(this);

    var url = 'https://gist.github.com/' + this.props.gist + '.json?callback=' + gistCallback;
    if (this.props.file) {
      url += '&file=' + this.props.file;
    }

    // Add the JSONP script tag to the document.
    var script = document.createElement('script');
    script.type = 'text/javascript';
    script.src = url;
    (document.head || document.body || { appendChild: function appendChild() {} }).appendChild(script);
  };

  EmbeddedGist.prototype.render = function render() {
    if (this.state.loading) {
      return React.createElement(
        'div',
        null,
        'loading...'
      );
    } else {
      return React.createElement('div', { dangerouslySetInnerHTML: { __html: this.state.src } });
    }
  };

  return EmbeddedGist;
}(React.PureComponent);

EmbeddedGist.propTypes = {
  gist: PropTypes.string.isRequired, // e.g. "username/id"
  file: PropTypes.string // to embed a single specific file from the gist
};

// Each time we request a Gist, we'll need to generate a new
// global function name to serve as the JSONP callback.
var gistCallbackId = 0;
EmbeddedGist.nextGistCallback = function () {
  return 'embed_gist_callback_' + gistCallbackId++;
};

EmbeddedGist.defaultProps = {
  gist: 'mathisonian/689614257cb1af6b15de3344da6cdc7a'
};

EmbeddedGist._idyll = {
  name: 'Gist',
  tagType: 'closed',
  props: [{
    name: 'gist',
    type: 'string',
    example: '"0f83a12e29b268ffca39f471ecf39e91"',
    description: 'The ID of the gist from github. Required.'
  }, {
    name: 'file',
    type: 'string',
    example: '"particles.idl"',
    description: 'A file within the Gist to show. Optional'
  }]
};
export default EmbeddedGist;