function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React from 'react';

var Header = function (_React$PureComponent) {
  _inherits(Header, _React$PureComponent);

  function Header() {
    _classCallCheck(this, Header);

    return _possibleConstructorReturn(this, _React$PureComponent.apply(this, arguments));
  }

  Header.prototype.render = function render() {
    var _this2 = this;

    var _props = this.props,
        background = _props.background,
        color = _props.color;

    return React.createElement(
      'div',
      { className: 'article-header', style: { background: background, color: color } },
      React.createElement(
        'h1',
        { className: 'hed' },
        this.props.title
      ),
      this.props.subtitle && React.createElement(
        'h2',
        { className: 'dek' },
        this.props.subtitle
      ),
      this.props.author && React.createElement(
        'div',
        { className: 'byline' },
        'By: ',
        React.createElement(
          'a',
          { href: this.props.authorLink },
          this.props.author
        )
      ),
      this.props.authors ? React.createElement(
        'div',
        { className: 'byline' },
        'By:',
        ' ',
        this.props.authors.map(function (author, i) {
          if (typeof author === 'string') {
            return author;
          }
          return author.link ? React.createElement(
            'span',
            { key: author.name },
            React.createElement(
              'a',
              { href: author.link },
              author.name
            ),
            i < _this2.props.authors.length - 1 ? i === _this2.props.authors.length - 2 ? ' and ' : ', ' : ''
          ) : author.name;
        })
      ) : null,
      this.props.date && React.createElement(
        'div',
        { className: 'idyll-pub-date' },
        this.props.date
      )
    );
  };

  return Header;
}(React.PureComponent);

Header._idyll = {
  name: 'Header',
  tagType: 'closed',
  props: [{
    name: 'title',
    type: 'string',
    example: '"Article Title"'
  }, {
    name: 'subtitle',
    type: 'string',
    example: '"Article subtitle."'
  }, {
    name: 'author',
    type: 'string',
    example: '"Author Name"'
  }, {
    name: 'authorLink',
    type: 'string',
    example: '"author.website"'
  }, {
    name: 'authors',
    type: 'array',
    example: "`[{name: 'Jane Doe', link: 'https://website.com'}]`",
    description: 'An array of authors. Each element of the array can be an object or a string.'
  }, {
    name: 'date',
    type: 'string',
    example: '"December 25, 2018"',
    description: 'The publication date.'
  }, {
    name: 'background',
    type: 'string',
    example: '"blue"',
    defaultValue: '"#222"',
    description: 'The background of the header. Can pass a color or a url().'
  }, {
    name: 'color',
    type: 'string',
    example: '"#000"',
    defaultValue: '"#fff"',
    description: 'The text color of the header.'
  }]
};

export default Header;