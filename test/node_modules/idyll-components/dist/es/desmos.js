var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React from 'react';

var desmosGraphCount = 0;
var desmosApiUrl = 'https://www.desmos.com/api/v1.1/calculator.js?apiKey=';
var desmosApiKey = 'dcb31709b452b1cf9dc26972add0fda6';

var Desmos = function (_React$Component) {
  _inherits(Desmos, _React$Component);

  function Desmos(props) {
    _classCallCheck(this, Desmos);

    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

    _this.state = {
      id: _this.props.id ? _this.generateId(_this.props.id) : 'desmos-' + desmosGraphCount++
    };
    if ((!_this.props.apiKey || _this.props.apiKey === desmosApiKey) && typeof window === 'undefined') {
      console.warn('\nWarning! You are using default API key for desmos. If you plan to use Desmos in production you should obtain a key from https://www.desmos.com/api/v1.3/docs/index.html#document-api-keys and supply it as the apiKey parameter.\n');
    }
    _this.getCurrentLatex = _this.getCurrentLatex.bind(_this);
    return _this;
  }

  Desmos.prototype.render = function render() {
    var _props = this.props,
        idyll = _props.idyll,
        hasError = _props.hasError,
        updateProps = _props.updateProps,
        apiKey = _props.apiKey,
        equation = _props.equation,
        _props$height = _props.height,
        height = _props$height === undefined ? 400 : _props$height,
        width = _props.width,
        id = _props.id,
        attributeProps = _objectWithoutProperties(_props, ['idyll', 'hasError', 'updateProps', 'apiKey', 'equation', 'height', 'width', 'id']);

    return React.createElement('div', _extends({ id: this.state.id, style: { height: height, width: width } }, attributeProps));
  };

  Desmos.prototype.generateId = function generateId() {
    var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

    return id.toString().trim().replace(/\s+/g, '-').toLowerCase();
  };

  Desmos.prototype.getCurrentLatex = function getCurrentLatex() {
    if (!this.calculator) {
      return;
    }

    var _calculator$getState = this.calculator.getState(),
        expressions = _calculator$getState.expressions;

    var filteredExpressions = expressions.list.filter(function (d) {
      return d.type === 'expression';
    });
    if (filteredExpressions.length) {
      return filteredExpressions[0].latex;
    }
  };

  Desmos.prototype.generateGraph = function generateGraph(equation) {
    var id = this.state.id;

    document.getElementById(id).innerHTML = '';
    var elt = document.getElementById(id);
    var calculator = window.Desmos.GraphingCalculator(elt);
    if (equation) {
      calculator.setExpression({ latex: equation });
    } else {
      calculator.setBlank();
    }

    this.calculator = calculator;

    // Have to pull these functions out because
    // `observeEvent` won't work with an arrow
    // function.
    var updateProps = this.props.updateProps;
    var getCurrentLatex = this.getCurrentLatex;

    // Catch changes when a user edits the
    // calculator.

    calculator.observeEvent('change', function () {
      var latex = getCurrentLatex();
      if (latex) {
        updateProps({ equation: latex });
      }
    });
  };

  Desmos.prototype.componentWillUpdate = function componentWillUpdate(nextProps) {
    var equation = nextProps.equation;
    // Only instantiate & update the calculator
    // when necessary to improve performance.

    if (equation !== this.props.equation && equation !== this.getCurrentLatex()) {
      if (this.calculator) {
        var newState = this.calculator.getState();
        newState.expressions.list[0].type = 'expression';
        newState.expressions.list[0].latex = equation;
        this.calculator.setState(newState);
      } else {
        this.generateGraph(equation);
      }
    }
  };

  Desmos.prototype.componentDidMount = function componentDidMount() {
    var _this2 = this;

    var _props2 = this.props,
        _props2$apiKey = _props2.apiKey,
        apiKey = _props2$apiKey === undefined ? desmosApiKey : _props2$apiKey,
        equation = _props2.equation;

    var script = document.createElement('script');
    script.src = '' + (desmosApiUrl + apiKey);
    script.async = true;
    document.body.appendChild(script);
    script.onload = function () {
      _this2.generateGraph(equation);
    };
  };

  return Desmos;
}(React.Component);

Desmos._idyll = {
  name: 'Desmos',
  tagType: 'closed',
  props: [{
    name: 'apiKey',
    type: 'string',
    example: '"dcb31709b452b1cf9dc26972add0fda6"'
  }, {
    name: 'equation',
    type: 'string',
    example: '"y=x^2"'
  }, {
    name: 'id',
    type: 'string',
    example: '"linear-equation"'
  }, {
    name: 'height',
    type: 'string',
    example: '"400px"'
  }, {
    name: 'width',
    type: 'string',
    example: '"350px"'
  }]
};

export default Desmos;