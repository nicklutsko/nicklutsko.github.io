function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React from 'react';
var YouTube = void 0;

var YT_PLAYING = 1;
var YT_PAUSED = 2;

var YoutubeComponent = function (_React$Component) {
  _inherits(YoutubeComponent, _React$Component);

  function YoutubeComponent(props) {
    _classCallCheck(this, YoutubeComponent);

    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

    _this.state = {
      mounted: false
    };
    return _this;
  }

  YoutubeComponent.prototype.componentDidMount = function componentDidMount() {
    this.setState({ mounted: true });
    YouTube = require('react-youtube').default;
  };

  YoutubeComponent.prototype.render = function render() {
    if (!this.state.mounted) {
      return null;
    }

    var opts = {
      height: this.props.height,
      width: this.props.width,
      playerVars: Object.assign({}, {
        // https://developers.google.com/youtube/player_parameters
        autoplay: this.props.play
      }, this.props.options)
    };

    return React.createElement(YouTube, {
      key: this.props.id,
      videoId: this.props.id,
      opts: opts,
      onReady: this._onReady.bind(this)
    });
  };

  YoutubeComponent.prototype.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {
    if (this._player && this.props.id !== prevProps.id) {
      // // The video has changed
      // this.props.audio ? this._player.unMute() : this._player.mute();
      // if (this.props.play) {
      //   console.log('playing video')
      //   setTimeout(() => {
      //     this._player.playVideo();
      //   }, 1000)
      // }
    } else {
      // Modify options to the same video
      if (this._player && this.props.play !== prevProps.play) {
        this.props.play ? this._player.playVideo() : this._player.pauseVideo();
      }
      if (this._player && this.props.audio !== prevProps.audio) {
        this.props.audio ? this._player.unMute() : this._player.mute();
      }
    }
  };

  YoutubeComponent.prototype._onReady = function _onReady(event) {
    var _this2 = this;

    this._player = event.target;
    if (!this.props.audio) {
      this._player.mute();
    }
    this._player.addEventListener('onStateChange', function (event) {
      if (event.data === YT_PLAYING && !_this2.props.play) {
        _this2.props.updateProps({ play: true });
      } else if (event.data === YT_PAUSED && _this2.props.play) {
        _this2.props.updateProps({ play: false });
      }
    });
    this.props.onReady && this.props.onReady();
  };

  return YoutubeComponent;
}(React.Component);

YoutubeComponent._idyll = {
  name: 'Youtube',
  tagType: 'closed',
  props: [{
    name: 'onReady',
    type: 'expression',
    example: '`initialized = true`',
    description: 'Callback triggered when the video is ready to play.'
  }, {
    name: 'width',
    type: 'integer',
    example: '600',
    description: 'Width of the video.'
  }, {
    name: 'height',
    type: 'integer',
    example: '400',
    description: 'Height of the video.'
  }, {
    name: 'audio',
    type: 'boolean',
    example: 'false',
    defaultValue: 'true',
    description: 'Is the audio turned on?'
  }, {
    name: 'play',
    type: 'boolean',
    example: 'true',
    defaultValue: 'false',
    description: 'Is the video playing?'
  }, {
    name: 'id',
    type: 'string',
    example: '<youtube-video-id>',
    description: 'YouTube video id. Required.'
  }, {
    name: 'options',
    type: 'object',
    example: '`{ modestbranding: 1 }`',
    defaultValue: '`{}`',
    description: 'Dictionary of extra options. See YouTube docs for all options.'
  }]
};
export default YoutubeComponent;