function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React from 'react';
var ReactDOM = require('react-dom');
var imageCache = [];

var Preloader = function (_React$PureComponent) {
  _inherits(Preloader, _React$PureComponent);

  function Preloader() {
    _classCallCheck(this, Preloader);

    return _possibleConstructorReturn(this, _React$PureComponent.apply(this, arguments));
  }

  Preloader.prototype.componentDidMount = function componentDidMount() {
    var images = this.props.images;

    images.forEach(function (i) {
      var img = new Image();
      img.src = i;
      imageCache.push(img);
    });
  };

  Preloader.prototype.render = function render() {
    return null;
  };

  return Preloader;
}(React.PureComponent);

Preloader.defaultProps = {
  images: []
};

Preloader._idyll = {
  name: 'Preloader',
  tagType: 'closed',
  displayType: 'inline',
  props: [{
    name: 'images',
    type: 'array',
    description: 'the array of images: `["image-url-1.png", "image-url-2.jpg"]`.',
    example: '["image-url-1.png", "image-url-2.jpg"]'
  }]
};

export default Preloader;