function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var React = require('react');

var StepperControl = function (_React$Component) {
  _inherits(StepperControl, _React$Component);

  function StepperControl() {
    _classCallCheck(this, StepperControl);

    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
  }

  StepperControl.prototype.componentDidMount = function componentDidMount() {};

  StepperControl.prototype.render = function render() {
    var _props = this.props,
        idyll = _props.idyll,
        props = _objectWithoutProperties(_props, ['idyll']);

    return React.createElement(
      'div',
      { className: 'idyll-stepper-control' },
      React.createElement(
        'div',
        { className: 'idyll-stepper-control-button idyll-stepper-control-button-previous', onClick: this.props.previous },
        '\u2190'
      ),
      React.createElement(
        'div',
        { className: 'idyll-stepper-control-button idyll-stepper-control-button-next', onClick: this.props.next },
        '\u2192'
      )
    );

    // (
    //   <div ref={(ref) => this.ref = ref} className={`idyll-step ${className || ''}`}  style={{margin: '10vh 0 60vh 0'}} {...props} />
    // );
  };

  return StepperControl;
}(React.Component);

StepperControl._idyll = {
  name: "StepperControl",
  tagType: "closed"
};

export default StepperControl;