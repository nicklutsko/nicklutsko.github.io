var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var React = require('react');

var _require = require('idyll-component-children'),
    mapChildren = _require.mapChildren;

var Loop = function (_React$Component) {
  _inherits(Loop, _React$Component);

  function Loop() {
    _classCallCheck(this, Loop);

    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
  }

  Loop.prototype.render = function render() {
    var _props = this.props,
        children = _props.children,
        value = _props.value;


    if (children) {
      return value.map(function (val) {
        return mapChildren(children, function (child) {
          if ((typeof child === 'undefined' ? 'undefined' : _typeof(child)) !== 'object') {
            return child;
          }
          var newProps = Object.assign({}, child.props);
          newProps = Object.keys(child.props).reduce(function (props, elm) {
            if (props[elm] === '_iterator') {
              props[elm] = val;
              return props;
            }
            return props;
          }, newProps);
          return React.cloneElement(child, _extends({}, newProps));
        });
      });
    }
    return null;
  };

  return Loop;
}(React.Component);

Loop._idyll = {
  name: 'Loop',
  tagType: 'open',
  children: ['Some text'],
  props: [{
    name: 'value',
    type: 'array',
    example: "['one', 'two', 'three']",
    description: 'Array of values to map.'
  }]
};
module.exports = Loop;