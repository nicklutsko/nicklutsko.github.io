function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React from 'react';
var ReactDOM = require('react-dom');
var id = 0;

var Radio = function (_React$PureComponent) {
  _inherits(Radio, _React$PureComponent);

  function Radio(props) {
    _classCallCheck(this, Radio);

    var _this = _possibleConstructorReturn(this, _React$PureComponent.call(this, props));

    _this.onChange = _this.onChange.bind(_this);
    _this.id = id++;
    return _this;
  }

  Radio.prototype.onChange = function onChange(e) {
    this.props.updateProps({ value: e.target.value });
  };

  Radio.prototype.render = function render() {
    var _this2 = this;

    var _props = this.props,
        idyll = _props.idyll,
        hasError = _props.hasError,
        updateProps = _props.updateProps,
        options = _props.options,
        value = _props.value,
        props = _objectWithoutProperties(_props, ['idyll', 'hasError', 'updateProps', 'options', 'value']);

    return React.createElement(
      'div',
      props,
      options.map(function (d) {
        if (typeof d === 'string') {
          return React.createElement(
            'label',
            { key: d },
            React.createElement('input', {
              type: 'radio',
              checked: d === value,
              onChange: _this2.onChange,
              value: d,
              name: _this2.id
            }),
            d
          );
        }
        return React.createElement(
          'label',
          { key: d.value },
          React.createElement('input', {
            type: 'radio',
            checked: d.value === value,
            onChange: _this2.onChange,
            value: d.value,
            name: _this2.id
          }),
          d.label || d.value
        );
      })
    );
  };

  return Radio;
}(React.PureComponent);

Radio.defaultProps = {
  options: []
};

Radio._idyll = {
  name: 'Radio',
  tagType: 'closed',
  props: [{
    name: 'value',
    type: 'string',
    example: 'x',
    description: 'The value of the "checked" radio button'
  }, {
    name: 'options',
    type: 'array',
    example: '`["option1", "option2"]`',
    description: 'an array representing the different buttons. Can be an array of strings like `["val1", "val2"]` or an array of objects `[{ value: "val1", label: "Value 1" }, { value: "val2", label: "Value 2" }]`.'
  }]
};

export default Radio;