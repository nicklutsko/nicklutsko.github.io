var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React from 'react';
var ReactDOM = require('react-dom');

var Select = function (_React$PureComponent) {
  _inherits(Select, _React$PureComponent);

  function Select(props) {
    _classCallCheck(this, Select);

    var _this = _possibleConstructorReturn(this, _React$PureComponent.call(this, props));

    _this.onChange = _this.onChange.bind(_this);
    return _this;
  }

  Select.prototype.onChange = function onChange(e) {
    this.props.updateProps({ value: e.target.value });
  };

  Select.prototype.render = function render() {
    var _props = this.props,
        idyll = _props.idyll,
        hasError = _props.hasError,
        updateProps = _props.updateProps,
        props = _objectWithoutProperties(_props, ['idyll', 'hasError', 'updateProps']);

    return React.createElement(
      'select',
      _extends({ onChange: this.onChange }, props),
      this.props.options.map(function (d) {
        if (typeof d === 'string') {
          return React.createElement(
            'option',
            { key: d, value: d },
            d
          );
        }
        return React.createElement(
          'option',
          { key: d.label || d.value, value: d.value },
          d.label || d.value
        );
      })
    );
  };

  return Select;
}(React.PureComponent);

Select.defaultProps = {
  options: []
};

Select._idyll = {
  name: 'Select',
  tagType: 'closed',
  props: [{
    name: 'value',
    type: 'string',
    example: 'x',
    description: 'The currently selected value.'
  }, {
    name: 'options',
    type: 'array',
    example: '`["option1", "option2"]`',
    description: 'An array representing the different options. Can be an array of strings like `["val1", "val2"]` or an array of objects `[{ value: "val1", label: "Value 1" }, { value: "val2", label: "Value 2" }]`.'
  }]
};
export default Select;