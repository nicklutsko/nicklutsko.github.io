'use strict';

exports.__esModule = true;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactTooltip = require('react-tooltip');

var _reactTooltip2 = _interopRequireDefault(_reactTooltip);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var AuthorTool = function (_React$PureComponent) {
  _inherits(AuthorTool, _React$PureComponent);

  function AuthorTool(props) {
    _classCallCheck(this, AuthorTool);

    var _this = _possibleConstructorReturn(this, _React$PureComponent.call(this, props));

    _this.state = {
      isAuthorView: false,
      debugHeight: 0,
      componentHeight: 0,
      hasPressedButton: false
    };
    _this.handleClick = _this.handleClick.bind(_this);
    return _this;
  }

  // For all available props in metaValues, display them
  // If runtimeValues has a value for given prop, display it
  // Returns this in a single table row <tr>


  AuthorTool.prototype.handleTableValues = function handleTableValues(metaValues, runtimeValues) {
    return metaValues.props.map(function (prop) {
      var runtimeValue = runtimeValues.props[prop.name];
      var currentPropValue = null;
      if (runtimeValue !== undefined) {
        if (runtimeValue && {}.toString.call(runtimeValue) === '[object Function]') {
          currentPropValue = _react2.default.createElement(
            'em',
            null,
            'function'
          );
        } else {
          currentPropValue = runtimeValue;
        }
      }
      return _react2.default.createElement(
        'tr',
        { key: JSON.stringify(prop), className: 'props-table-row' },
        _react2.default.createElement(
          'td',
          null,
          prop.name
        ),
        _react2.default.createElement(
          'td',
          { className: 'props-table-type' },
          prop.type
        ),
        _react2.default.createElement(
          'td',
          null,
          prop.example
        ),
        _react2.default.createElement(
          'td',
          null,
          currentPropValue
        )
      );
    });
  };

  // Returns authoring information for the prop values in table format
  // and includes a link to the docs page at the bottom


  AuthorTool.prototype.handleFormatComponent = function handleFormatComponent(runtimeValues) {
    var _this2 = this;

    var metaValues = runtimeValues.type._idyll;
    var componentName = metaValues.name;

    // Docs use lowercase component name for link
    var componentLowerCase = componentName.charAt(0).toLowerCase() + componentName.slice(1);
    var componentDocsLink = 'https://idyll-lang.org/docs/components/default/' + componentLowerCase;

    var showProps = this.handleTableValues(metaValues, runtimeValues);
    var _state = this.state,
        isAuthorView = _state.isAuthorView,
        debugHeight = _state.debugHeight,
        componentHeight = _state.componentHeight;

    var currentDebugHeight = isAuthorView ? debugHeight : 0;
    var marginToGive = isAuthorView ? 15 : 0;
    // If a component's height is too small, button will overlap with table
    // so add margin to get a minimal height (40px seems fine)
    var marginAboveTable = componentHeight < 40 && isAuthorView ? 40 - componentHeight : 0;
    return _react2.default.createElement(
      'div',
      {
        className: 'debug-collapse',
        style: {
          height: currentDebugHeight + 'px',
          marginBottom: marginToGive + 'px',
          marginTop: marginAboveTable + 'px'
        }
      },
      _react2.default.createElement(
        'div',
        {
          className: 'author-component-view',
          ref: function ref(inner) {
            return _this2.innerHeight = inner;
          }
        },
        _react2.default.createElement(
          'table',
          { className: 'props-table' },
          _react2.default.createElement(
            'tbody',
            null,
            _react2.default.createElement(
              'tr',
              { className: 'props-table-row' },
              _react2.default.createElement(
                'th',
                null,
                'Prop'
              ),
              _react2.default.createElement(
                'th',
                null,
                'Type'
              ),
              _react2.default.createElement(
                'th',
                null,
                'Example'
              ),
              _react2.default.createElement(
                'th',
                null,
                'Current Value'
              )
            ),
            showProps
          )
        ),
        _react2.default.createElement(
          'div',
          { className: 'icon-links' },
          _react2.default.createElement(
            'a',
            { className: 'icon-link', href: componentDocsLink },
            _react2.default.createElement('img', {
              className: 'icon-link-image',
              src: 'https://raw.githubusercontent.com/google/material-design-icons/master/action/svg/design/ic_description_24px.svg?sanitize=true'
            })
          ),
          _react2.default.createElement(
            'a',
            { className: 'icon-link', href: componentDocsLink },
            _react2.default.createElement(
              'span',
              {
                style: {
                  fontFamily: 'courier',
                  fontSize: '12px',
                  marginTop: '8px'
                }
              },
              'docs'
            )
          )
        )
      )
    );
  };

  // Flips between whether we are in the author view of a component


  AuthorTool.prototype.handleClick = function handleClick() {
    var _this3 = this;

    this.setState(function (prevState) {
      return {
        isAuthorView: !prevState.isAuthorView,
        debugHeight: _this3.innerHeight.getBoundingClientRect().height
      };
    });
    if (!this.state.hasPressedButton) {
      this.setState({
        componentHeight: this._refContainer.getBoundingClientRect().height,
        hasPressedButton: true
      });
    }
  };

  // Returns an entire author view, including the component itself,
  // a quill icon to indicate whether we're hovering in the component,
  // and debugging information when the icon is pressed


  AuthorTool.prototype.render = function render() {
    var _this4 = this;

    var _props = this.props,
        idyll = _props.idyll,
        updateProps = _props.updateProps,
        hasError = _props.hasError,
        props = _objectWithoutProperties(_props, ['idyll', 'updateProps', 'hasError']);

    var addBorder = this.state.isAuthorView ? {
      boxShadow: '5px 5px 10px 1px lightGray',
      transition: 'box-shadow 0.35s linear',
      padding: '0px 10px 10px',
      margin: '0px -10px 20px'
    } : null;
    var putButtonBack = this.state.isAuthorView ? {
      right: '10px',
      top: '3px'
    } : null;

    return _react2.default.createElement(
      'div',
      {
        className: 'component-debug-view',
        style: addBorder,
        ref: function ref(_ref) {
          return _this4._refContainer = _ref;
        }
      },
      props.component,
      _react2.default.createElement('button', {
        className: 'author-view-button',
        style: putButtonBack,
        onClick: this.handleClick,
        'data-tip': true,
        'data-for': props.uniqueKey
      }),
      _react2.default.createElement(
        _reactTooltip2.default,
        {
          className: 'button-tooltip',
          id: props.uniqueKey,
          type: 'info',
          effect: 'solid',
          place: 'bottom' // TODO not showing up ?
          , disable: this.state.isAuthorView
        },
        _react2.default.createElement(
          'div',
          { className: 'tooltip-header' },
          props.authorComponent.type._idyll.name,
          ' Component'
        ),
        _react2.default.createElement(
          'div',
          { className: 'tooltip-subtitle' },
          'Click for more info'
        )
      ),
      this.handleFormatComponent(props.authorComponent)
    );
  };

  return AuthorTool;
}(_react2.default.PureComponent);

exports.default = AuthorTool;