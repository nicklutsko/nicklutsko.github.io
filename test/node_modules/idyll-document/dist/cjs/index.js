'use strict';

exports.__esModule = true;
exports.hashCode = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _runtime = require('./runtime');

var _runtime2 = _interopRequireDefault(_runtime);

var _idyllCompiler = require('idyll-compiler');

var _idyllCompiler2 = _interopRequireDefault(_idyllCompiler);

var _idyllLayouts = require('idyll-layouts');

var layouts = _interopRequireWildcard(_idyllLayouts);

var _idyllThemes = require('idyll-themes');

var themes = _interopRequireWildcard(_idyllThemes);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var getLayout = function getLayout(layout) {
  return layouts[layout.trim()] || {};
};

var getTheme = function getTheme(theme) {
  return themes[theme.trim()] || {};
};

var defaultAST = {
  id: 0,
  type: 'component',
  name: 'root'
};

var hashCode = exports.hashCode = function hashCode(str) {
  var hash = 0,
      i,
      chr;
  if (str.length === 0) return hash;
  for (i = 0; i < str.length; i++) {
    chr = str.charCodeAt(i);
    hash = (hash << 5) - hash + chr;
    hash |= 0; // Convert to 32bit integer
  }
  return hash;
};

var IdyllDocument = function (_React$Component) {
  _inherits(IdyllDocument, _React$Component);

  function IdyllDocument(props) {
    _classCallCheck(this, IdyllDocument);

    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

    _this.state = {
      ast: props.ast || defaultAST,
      previousAST: props.ast || defaultAST,
      hash: props.ast ? JSON.stringify(props.ast) : '',
      error: null
    };
    return _this;
  }

  IdyllDocument.prototype.createStyleNode = function createStyleNode(str) {
    var node = document.createElement('style');
    node.innerHTML = str;
    document.body.appendChild(node);
    return node;
  };

  IdyllDocument.prototype.componentDidMount = function componentDidMount() {
    var _this2 = this;

    if (!this.props.ast && this.props.markup) {
      (0, _idyllCompiler2.default)(this.props.markup, this.props.compilerOptions).then(function (ast) {
        _this2.setState({ ast: ast, hash: hashCode(_this2.props.markup), error: null });
      });
    }

    if (this.props.injectThemeCSS) {
      this._themeNode = this.createStyleNode(getTheme(this.props.theme).styles);
    }
    if (this.props.injectLayoutCSS) {
      this._layoutNode = this.createStyleNode(getLayout(this.props.layout).styles);
    }
  };

  IdyllDocument.prototype.componentDidCatch = function componentDidCatch(error, info) {
    this.props.onError && this.props.onError(error);
    this.setState({ error: error.message });
  };

  IdyllDocument.prototype.componentWillReceiveProps = function componentWillReceiveProps(newProps) {
    var _this3 = this;

    if (newProps.theme !== this.props.theme && newProps.injectThemeCSS) {
      if (this._themeNode) {
        this._themeNode.innerHTML = getTheme(newProps.theme).styles;
      } else {
        this._themeNode = this.createStyleNode(getTheme(newProps.theme).styles);
      }
    }
    if (newProps.layout !== this.props.layout && newProps.injectLayoutCSS) {
      if (this._layoutNode) {
        this._layoutNode.innerHTML = getLayout(newProps.layout).styles;
      } else {
        this._layoutNode = this.createStyleNode(getLayout(newProps.layout).styles);
      }
    }

    if (newProps.ast) {
      this.setState({ hash: JSON.stringify(newProps.ast) });
      return;
    }

    var hash = hashCode(newProps.markup);
    if (hash !== this.state.hash) {
      this.setState({ previousAST: this.state.ast });
      (0, _idyllCompiler2.default)(newProps.markup, newProps.compilerOptions).then(function (ast) {
        _this3.setState({ previousAST: ast, ast: ast, hash: hash, error: null });
      }).catch(this.componentDidCatch.bind(this));
    }
  };

  IdyllDocument.prototype.getErrorComponent = function getErrorComponent() {
    if (!this.state.error) {
      return null;
    }
    return _react2.default.createElement(this.props.errorComponent || 'pre', {
      className: 'idyll-document-error'
    }, this.state.error);
  };

  IdyllDocument.prototype.render = function render() {
    var _this4 = this;

    return _react2.default.createElement(
      'div',
      null,
      _react2.default.createElement(_runtime2.default, _extends({}, this.props, {
        key: this.state.hash,
        context: function context(_context) {
          _this4.idyllContext = _context;
          typeof _this4.props.context === 'function' && _this4.props.context(_context);
        },
        initialState: this.props.initialState || (this.idyllContext ? this.idyllContext.data() : {}),
        ast: this.props.ast || this.state.ast
      })),
      this.getErrorComponent()
    );
  };

  return IdyllDocument;
}(_react2.default.Component);

exports.default = IdyllDocument;