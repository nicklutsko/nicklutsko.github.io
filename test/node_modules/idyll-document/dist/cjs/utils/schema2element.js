'use strict';

exports.__esModule = true;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDomFactories = require('react-dom-factories');

var _reactDomFactories2 = _interopRequireDefault(_reactDomFactories);

var _changeCase = require('change-case');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _componentMap = new WeakMap();

var ReactJsonSchema = function () {
  function ReactJsonSchema(componentMap) {
    _classCallCheck(this, ReactJsonSchema);

    if (componentMap) this.setComponentMap(componentMap);
  }

  ReactJsonSchema.prototype.parseSchema = function parseSchema(schema) {
    var element = null;
    var elements = null;
    if (Array.isArray(schema)) {
      elements = this.parseSubSchemas(schema);
    } else {
      element = this.createComponent(schema);
    }
    return element || elements;
  };

  ReactJsonSchema.prototype.parseSubSchemas = function parseSubSchemas() {
    var subSchemas = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

    var Components = [];
    var index = 0;
    for (var _iterator = subSchemas, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var subSchema = _ref;

      if (typeof subSchema === 'string') {
        Components.push(subSchema);
      } else {
        subSchema.key = typeof subSchema.key !== 'undefined' ? subSchema.key : index;
        Components.push(this.parseSchema(subSchema));
        index++;
      }
    }
    return Components;
  };

  ReactJsonSchema.prototype.createComponent = function createComponent(schema) {
    if (schema.type) {
      if (schema.type === 'textnode') return schema.value;
    }

    var component = schema.component,
        children = schema.children,
        rest = _objectWithoutProperties(schema, ['component', 'children']);

    var Component = this.resolveComponent(schema);
    var Children = this.resolveComponentChildren(schema);
    return (0, _react.createElement)(Component, rest, Children);
  };

  ReactJsonSchema.prototype.resolveComponent = function resolveComponent(schema) {
    var componentMap = this.getComponentMap();
    var Component = void 0;
    // bail early if there is no component name
    if (!schema.hasOwnProperty('component')) {
      throw new Error('ReactJsonSchema could not resolve a component due to a missing component attribute in the schema.');
    }

    // if it's already a ref bail early
    if (schema.component === Object(schema.component)) {
      return schema.component;
    }

    var _schema$component$spl = schema.component.split('.'),
        name = _schema$component$spl[0],
        subs = _schema$component$spl.slice(1);

    // find the def in the provided map


    if (componentMap) {
      Component = componentMap[name];
      if (!Component) Component = componentMap[(0, _changeCase.paramCase)(name)];
      if (!Component) Component = componentMap[(0, _changeCase.pascalCase)(name)];

      for (var i = 0; i < subs.length; i++) {
        Component = Component[subs[i]];
      }
    }

    // if still nothing found it's a native DOM component or an error
    if (!Component) {
      if (_reactDomFactories2.default.hasOwnProperty(name)) {
        Component = schema.component;
      } else {
        console.warn('Could not find an implementation for: ' + schema.component);
        return function () {
          return _react2.default.createElement(
            'div',
            { style: { color: 'black', border: 'solid 1px red' } },
            _react2.default.createElement(
              'pre',
              null,
              'Could not find an implementation for: ',
              schema.component
            )
          );
        };
      }
    }

    // if there is a default prop (CommonJS) return that
    return Component.default || Component;
  };

  ReactJsonSchema.prototype.resolveComponentChildren = function resolveComponentChildren(schema) {
    var children = schema.hasOwnProperty('children') ? this.parseSchema(schema.children) : [];
    return children.length ? children : undefined;
  };

  ReactJsonSchema.prototype.getComponentMap = function getComponentMap() {
    return _componentMap.get(this);
  };

  ReactJsonSchema.prototype.setComponentMap = function setComponentMap(componentMap) {
    _componentMap.set(this, componentMap);
  };

  return ReactJsonSchema;
}();

exports.default = ReactJsonSchema;