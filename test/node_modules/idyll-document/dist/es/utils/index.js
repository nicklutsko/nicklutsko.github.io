var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var falafel = require('falafel');
var parse = require('csv-parse/lib/es5/sync');

var _require = require('idyll-ast'),
    getChildren = _require.getChildren,
    getNodeName = _require.getNodeName,
    getProperties = _require.getProperties,
    getType = _require.getType,
    removeNodesByName = _require.removeNodesByName;

var isPropertyAccess = function isPropertyAccess(node) {
  var index = node.parent.source().indexOf('.' + node.name);
  if (index === -1) {
    return false;
  }
  var proxyString = '__idyllStateProxy';
  if (index >= proxyString.length) {
    if (node.parent.source().substr(index - proxyString.length, proxyString.length) === proxyString) {
      return false;
    }
  }
  return true;
};

var isObjectKey = function isObjectKey(node) {
  return node.parent.type === 'Property' && node.parent.key === node;
};

export var buildExpression = function buildExpression(acc, expr, isEventHandler) {
  var identifiers = [];
  var modifiedExpression = '';

  try {
    modifiedExpression = falafel(isEventHandler ? expr : 'var __idyllReturnValue = ' + (expr || 'undefined'), function (node) {
      switch (node.type) {
        case 'Identifier':
          var skip = isPropertyAccess(node) || isObjectKey(node);
          if (Object.keys(acc).indexOf(node.name) > -1) {
            identifiers.push(node.name);
            if (!skip) {
              node.update('__idyllStateProxy.' + node.source());
            }
          }
          break;
      }
    });
  } catch (e) {
    console.error(e);
  }

  if (!isEventHandler) {
    return '\n    ((context) => {\n      var __idyllStateProxy = new Proxy({}, {\n        get: (_, prop) => {\n          return context[prop];\n        },\n        set: (_, prop, value) => {\n          console.warn(\'Warning, trying to set a value in a property expression.\');\n        }\n      });\n      ' + modifiedExpression + ';\n      return __idyllReturnValue;\n    })(this)';
  }

  return '\n    ((context) => {\n        var __idyllExpressionExecuted = false;\n        var __idyllStateProxy = new Proxy({\n          ' + identifiers.map(function (key) {
    return key + ': ' + (key !== 'refs' ? 'context.__idyllCopy(context[\'' + key + '\'])' : 'context[\'' + key + '\']');
  }).join(', ') + '\n        }, {\n          get: (target, prop) => {\n            return target[prop];\n          },\n          set: (target, prop, value) => {\n            if (__idyllExpressionExecuted) {\n              var newState = {};\n              newState[prop] = value;\n              context.__idyllUpdate(newState);\n            }\n            target[prop] = value;\n            return true;\n          }\n        });\n        ' + modifiedExpression + ';\n        context.__idyllUpdate({\n          ' + identifiers.filter(function (key) {
    return key !== 'refs';
  }).map(function (key) {
    return key + ': __idyllStateProxy[\'' + key + '\']';
  }).join(', ') + '\n        });\n        __idyllExpressionExecuted = true;\n    })(this)\n  ';
};

export var evalExpression = function evalExpression(acc, expr, key, context) {
  var isEventHandler = key && (key.match(/^on[A-Z].*/) || key.match(/^handle[A-Z].*/));
  var e = buildExpression(acc, expr, isEventHandler);
  if (isEventHandler) {
    return function () {
      eval(e);
    }.bind(Object.assign({}, acc, context || {}, {
      __idyllCopy: function copy(o) {
        if ((typeof o === 'undefined' ? 'undefined' : _typeof(o)) !== 'object') return o;
        var output, v, key;
        output = Array.isArray(o) ? [] : {};
        for (key in o) {
          v = o[key];
          output[key] = (typeof v === 'undefined' ? 'undefined' : _typeof(v)) === 'object' ? copy(v) : v;
        }
        return output;
      }
    }));
  }

  try {
    return function (evalString) {
      try {
        return eval('(' + evalString + ')');
      } catch (err) {
        console.warn('Error occurred in Idyll expression');
        console.error(err);
      }
    }.call(Object.assign({}, acc), e);
  } catch (err) {}
};

export var getVars = function getVars(arr) {
  var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var formatAccumulatedValues = function formatAccumulatedValues(acc) {
    var ret = {};
    Object.keys(acc).forEach(function (key) {
      var accVal = acc[key];
      if (typeof accVal.update !== 'undefined' && typeof accVal.value !== 'undefined') {
        ret[key] = accVal.value;
      } else {
        ret[key] = accVal;
      }
    });
    return ret;
  };

  var pluck = function pluck(acc, val) {
    var variableType = getType(val);
    var attrs = getProperties(val) || [];

    if (!attrs.name || !attrs.value) return attrs;

    var nameValue = attrs.name.value;
    var valueType = attrs.value.type;
    var valueValue = attrs.value.value;

    switch (valueType) {
      case 'value':
        acc[nameValue] = valueValue;
        break;
      case 'variable':
        if (context.hasOwnProperty(valueValue)) {
          acc[nameValue] = context[valueValue];
        } else {
          acc[nameValue] = evalExpression(context, expr);
        }
        break;
      case 'expression':
        var expr = valueValue;
        if (variableType === 'var') {
          acc[nameValue] = evalExpression(Object.assign({}, context, formatAccumulatedValues(acc)), expr);
        } else {
          acc[nameValue] = {
            value: evalExpression(Object.assign({}, context, formatAccumulatedValues(acc)), expr),
            update: function update(newState, oldState) {
              var context = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

              return evalExpression(Object.assign({}, oldState, newState, context), expr);
            }
          };
        }
    }
    return acc;
  };

  return arr.reduce(pluck, {});
};

var filterIdyllProps = function filterIdyllProps(props, filterInjected) {
  var __vars__ = props.__vars__,
      __expr__ = props.__expr__,
      idyllASTNode = props.idyllASTNode,
      hasHook = props.hasHook,
      initialState = props.initialState,
      isHTMLNode = props.isHTMLNode,
      refName = props.refName,
      onEnterViewFully = props.onEnterViewFully,
      onEnterView = props.onEnterView,
      onExitViewFully = props.onExitViewFully,
      onExitView = props.onExitView,
      fullWidth = props.fullWidth,
      rest = _objectWithoutProperties(props, ['__vars__', '__expr__', 'idyllASTNode', 'hasHook', 'initialState', 'isHTMLNode', 'refName', 'onEnterViewFully', 'onEnterView', 'onExitViewFully', 'onExitView', 'fullWidth']);

  if (filterInjected) {
    var idyll = rest.idyll,
        hasError = rest.hasError,
        updateProps = rest.updateProps,
        ret = _objectWithoutProperties(rest, ['idyll', 'hasError', 'updateProps']);

    return ret;
  }
  return rest;
};
export { filterIdyllProps };
export var getData = function getData(arr) {
  var datasets = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var pluck = function pluck(acc, val) {
    var nameValue = getProperties(val).name.value;
    var sourceValue = getProperties(val).source.value;
    var async = getProperties(val).async ? getProperties(val).async.value : false;
    if (async) {
      var initialValue = getProperties(val).initialValue ? JSON.parse(getProperties(val).initialValue.value) : [];

      var dataPromise = new Promise(function (res) {
        return res(initialValue);
      });

      if (typeof fetch !== 'undefined') {
        dataPromise = fetch(sourceValue).then(function (res) {
          if (res.status >= 400) {
            throw new Error('Error Status ' + res.status + ' occurred while fetching data from ' + sourceValue + '. If you are using a file to load the data and not a url, make sure async is not set to true.');
          }
          if (sourceValue.endsWith('.csv')) {
            return res.text().then(function (resString) {
              return parse(resString, { cast: true, columns: true });
            }).catch(function (e) {
              console.error('Error while parsing csv: ' + e);
            });
          }
          return res.json().catch(function (e) {
            return console.error(e);
          });
        }).catch(function (e) {
          console.error(e);
        });
      } else if (typeof window !== 'undefined') {
        console.warn('Could not find fetch.');
      }
      acc.asyncData[nameValue] = {
        initialValue: initialValue,
        dataPromise: dataPromise
      };
    } else {
      acc.syncData[nameValue] = datasets[nameValue];
    }

    return acc;
  };

  return arr.reduce(pluck, { syncData: {}, asyncData: {} });
};

export var splitAST = function splitAST(ast) {
  var state = {
    vars: [],
    derived: [],
    data: [],
    elements: []
  };

  var handleNode = function handleNode(storeElements) {
    return function (node) {
      var type = getType(node);
      var props = getProperties(node);
      var children = getChildren(node);
      if (node.id != 0) {
        if (type === 'var') {
          state.vars.push(node);
        } else if (state[type]) {
          state[type].push(node);
        } else if (storeElements) {
          state.elements.push(node);
        }
        if (!children || children.length === 1 && getType(children[0]) === 'textnode') {
          return;
        }
        children.forEach(handleNode(false));
      }
    };
  };

  ast.forEach(handleNode(true));
  return state;
};

//Properties that add logic to components for callbacks.
export var hooks = ['onEnterView', 'onEnterViewFully', 'onExitView', 'onExitViewFully'];

export var scrollMonitorEvents = {
  onEnterView: 'enterViewport',
  onEnterViewFully: 'fullyEnterViewport',
  onExitView: 'partiallyExitViewport',
  onExitViewFully: 'exitViewport'
};

export var translate = function translate(ast) {
  var attrConvert = function attrConvert(props, node) {
    var reducedProps = {
      idyllASTNode: node
    };
    for (var propName in props) {
      var name = propName;
      var type = props[propName].type;
      var value = props[propName].value;
      if (type == 'variable') {
        if (!reducedProps.__vars__) {
          reducedProps.__vars__ = {};
        }
        reducedProps.__vars__[name] = value;
      }
      if (type == 'expression') {
        if (!reducedProps.__expr__) {
          reducedProps.__expr__ = {};
        }
        reducedProps.__expr__[name] = value;
      }

      if (hooks.includes(name)) {
        reducedProps.hasHook = true;
      }

      reducedProps[name] = value;
    }
    return reducedProps;
  };
  var tNode = function tNode(node) {
    if (getType(node) === 'textnode') return node;

    var name = getNodeName(node);

    var attrs = getProperties(node);
    if (!attrs) {
      attrs = {};
    }
    var children = getChildren(node);
    return _extends({
      component: name
    }, attrConvert(attrs, node), {
      children: children.map(tNode)
    });
  };

  return splitAST(getChildren(ast)).elements.map(tNode);
};

export var mapTree = function mapTree(tree, mapFn) {
  var filterFn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function () {
    return true;
  };

  var walkFn = function walkFn(acc, node) {
    //To check for textnodes
    if (node.component) {
      //To check for childrens
      if (node.children) {
        node.children = node.children.reduce(walkFn, []);
      }
    }

    if (filterFn(node)) {
      acc.push(mapFn(node));
    }
    return acc;
  };
  var value = tree.reduce(walkFn, []);
  return value;
};

export var filterASTForDocument = function filterASTForDocument(ast) {
  return removeNodesByName(ast, 'meta');
};

var findWrapTargets = function findWrapTargets(schema, state, components) {
  //Custom components
  var targets = [];
  //Name of custom components
  var componentNames = Object.keys(components);

  componentNames.forEach(function (component, i) {
    var words = component.split('-');
    for (var _i = 0; _i < words.length; _i++) {
      words[_i] = words[_i].charAt(0).toUpperCase() + words[_i].substring(1);
    }
    componentNames[i] = words.join('').toLowerCase();
  });

  //Array of keys for the runtime state passed.
  var stateKeys = Object.keys(state);

  //Populating target with the custom componenets
  //Walk the whole tree, collect and return the nodes
  //for wrapping
  mapTree(schema, function (node) {
    if (node.component === 'textnode') {
      return node;
    }

    //Custom components will have hooks attached to them
    if (node.hasHook) {
      targets.push(node);
      return node;
    }

    if (node.component) {
      var checkName = node.component.toLowerCase().split('-').join('');
      if (componentNames.includes(checkName)) {
        targets.push(node);
        return node;
      }
    }

    var component = node.component,
        children = node.children,
        __vars__ = node.__vars__,
        __expr__ = node.__expr__,
        props = _objectWithoutProperties(node, ['component', 'children', '__vars__', '__expr__']);

    var expressions = Object.keys(__expr__ || {});
    var variables = Object.keys(__vars__ || {});

    for (var prop in props) {
      if (variables.includes(prop) || expressions.includes(prop)) {
        targets.push(node);
        return node;
      }
    }
    return node;
  });

  return targets;
};
export { findWrapTargets };