'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/**
 * @module idyll-ast
 * @description
 * This file contains utility functions for the Idyll-Ast libraray.
 * The structure and schema of the json can be found in the file ast.schema.json in
 * the package idyll-astV2.
 */

var error = require('./error');
var Ajv = require('ajv');
var ajv = new Ajv();
ajv.addMetaSchema(require('ajv/lib/refs/json-schema-draft-06.json'));
var schema = require('./ast.schema.json');
var validator = ajv.compile(schema);
var validatorProps = ajv.compile(schema.properties.properties);
var converters = require('./converters');

/**
 * @name appendNode
 * @type {function}
 * @description
 * Function to append a top-level child to the root element.
 * @param {object} ast   JSON-object
 * @param {object} node  JSON-object
 * @return {object} Modifed ast node
 */
var appendNode = function appendNode(ast, node) {
  checkASTandNode(ast, node);

  return appendNodes(ast, [node]);
};

/**
 * @name appendNodes
 * @type {function}
 * @description
 * Function to append multiple top-level children to the root element.
 * @param {oject} ast   JSON-object
 * @param {object[]} node  an array of JSON-objects
 * @return {object} modified ast
 */
var appendNodes = function appendNodes(ast, nodes) {
  checkASTandNodeArray(ast, nodes);
  return Object.assign({}, ast, {
    children: [].concat(ast.children, nodes)
  });
};

/**
 * @name createNode
 * @type {function}
 * @description
 * Function to creat a new AST node following the schema.
 * @param {integer} id   Id of the node
 * @param {string} name  Name of the node.
 * @param {string} type Type of the node.
 * @param {string} value Value evaluation of the node
 * @param {object[]} props Properties of the node.
 * @param {object[]} children Children of the node.
 * @return {object} New component node.
 */
var createNode = function createNode(id, name, type) {
  var props = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
  var children = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;

  checkForCreateNode(id, name, type, props, children);

  var node = new Object();
  node.id = id;
  node.type = type;
  node.name = name;
  if (props) {
    node.properties = Object.assign({}, props);
  }
  if (children) {
    node.children = Object.assign({}, children);
  }
  return node;
};

/**
 * @name createTextNode
 * @description
 * Function to create a new textnode
 * @param {*} id
 * @param {*} value
 * @return New textnode
 */
var createTextNode = function createTextNode(id, value) {
  typeCheckInteger(id, 'id');
  typeCheckString(value, 'value');

  var textnode = new Object();
  textnode.id = id;
  textnode.type = 'textnode';
  textnode.value = value;

  return textnode;
};

/**
 * @name getChildren
 * @type {function}
 * @description
 * Function to return the children of the passed node.
 * @param {object} node   AST node
 * @return {object[]} children of the node
 */
var getChildren = function getChildren(node) {
  typeCheckObject(node, 'node (gc)');
  runValidator(node, 'node');

  if (node.type === 'textnode') {
    return [];
  }
  if (node.children) {
    //console.log("node @ gc", node);
    return [].concat(node.children);
  } else {
    return [];
  }
};

/**
 * @name setChildren
 * @type { function }
 * @description
 * Function to set children of the passed node.
 * @param { object } node
 * @param { object } children
 * @return { object } modified node
 */
var setChildren = function setChildren(node, children) {
  typeCheckObject(node, 'node (sc)');
  runValidator(node, 'node');
  if (['textnode', 'var', 'derived', 'data'].indexOf(getType(node)) > -1) {
    return node;
    //throw new error.InvalidParameterError(getType(node) + " cannot have any children");
  }

  checkChildren(children);
  return Object.assign({}, node, { children: children });
};

var hasChildren = function hasChildren(node) {
  typeCheckObject(node, 'node (hc)');
  runValidator(node, 'node');

  if (['textnode', 'var', 'derived', 'data'].indexOf(getType(node)) > -1) {
    return false;
  }

  if (node.children && node.children.length) {
    //console.log("@hasChildren", node);
    return true;
  } else {
    return false;
  }
};
/**
 * @name getNodesByName
 * @type {function}
 * @description
 * Function to get all the nodes with the passed name in the passed AST.
 * @param {object} ast  AST object
 * @param {string} name name of the nodes
 * @return {object[]} Array of nodes matching the name
 */
var getNodesByName = function getNodesByName(ast, name) {
  typeCheckObject(ast, 'ast');
  typeCheckString(name, 'name');
  runValidator(ast, 'ast');
  var nodes = [];
  if (name === 'article') {
    nodes.push(ast);
  }
  var otherNodes = getNodesByNameHelper(ast.children, name);
  return nodes.concat(otherNodes);
};

/*
  Helper function for getNodesByName
*/
function getNodesByNameHelper(childArray, name) {
  var nodes = [].concat(childArray.filter(function (element) {
    return element.name === name;
  }));
  var otherNodes = [];
  childArray.forEach(function (node) {
    if (hasChildren(node)) {
      otherNodes = otherNodes.concat(getNodesByNameHelper(node.children, name));
    }
  });
  return nodes.concat(otherNodes);
}

/**
 * @name getNodesByType
 * @type {function}
 * @description
 * Function to get all the nodes with the passed name in the passed AST.
 * @param {object} ast  AST object
 * @param {string} type type of the nodes
 * @return {object[]} Array of nodes matching the name
 */
var getNodesByType = function getNodesByType(ast, type) {
  typeCheckObject(ast, 'ast');
  typeCheckString(type, 'type');
  runValidator(ast, 'ast');
  var nodes = [];
  var otherNodes = getNodesByTypeHelper(ast.children, type);
  return nodes.concat(otherNodes);
};

/*
  Helper function for getNodesByType
*/
function getNodesByTypeHelper(childArray, type) {
  var nodes = [].concat(childArray.filter(function (element) {
    return element.type === type;
  }));
  var otherNodes = [];
  childArray.forEach(function (node) {
    if (hasChildren(node)) {
      otherNodes = otherNodes.concat(getNodesByTypeHelper(node.children, type));
    }
  });
  return nodes.concat(otherNodes);
}

/**
 * @name hasType
 * @type {function}
 * Function to check if a node has type attribute or not
 * @param {object} node
 * @return {boolean} true if type exists, false otherwise
 */
var hasType = function hasType(node) {
  if (node.type) {
    return true;
  }
  return false;
};

/**
 * @name getType
 * @type {function}
 * @description
 * Function to get the type information of a node
 * @param {object} ast  AST object
 * @return {string} type of the node
 */
var getType = function getType(node) {
  typeCheckObject(node, 'node(Get type)');
  runValidator(node, 'node');

  return node.type;
};

/**
 * @name getText
 * @type {function}
 * @description
 * Function to get all the text from textnodes from the passes AST node
 * @param {object} ast AST node
 * @return {string}
 */
var getText = function getText(node) {
  typeCheckObject(node, 'node');
  runValidator(node, 'node');

  var texts = [];
  walkNodes(node, function (n) {
    if (n.type === 'textnode') {
      texts.push(n.value);
    }
  });
  return texts.join(' ');
};

/*
Change findNodes ==> filterNodes
*/
/**
 * @name filterNodes
 * @type {function}
 * @description
 * Function to find certain nodes based on a filter passed.
 * @param {object} ast   AST node
 * @param {function} filter  Filter function to find nodes
 * @return {object[]} Array of all the nodes found
 */
var filterNodes = function filterNodes(ast, filter) {
  checkASTandFunction(ast, 'ast', filter, 'filter');

  var result = [];
  walkNodes(ast, function (node) {
    if (filter(node)) result.push(Object.assign({}, node));
  });
  return result;
};

/**
 * @name modifyChildren
 * @type {function}
 * @description
 * Function to modify children of a passed AST node using a passed modifier.
 * @param {object}  node
 * @param {function}  modifier
 * @return {object} node with modified children.
 */
var modifyChildren = function modifyChildren(node, modifier) {
  checkASTandFunction(node, 'node', modifier, 'modifier');

  //Keeping the functionality same as before for textnode
  if (['textnode', 'var', 'derived', 'data'].indexOf(node.type) > -1) {
    return node;
  }
  return Object.assign({}, node, {
    children: getChildren(node).map(function (child) {
      return modifier(child);
    })
  });
};

/**
 * @name filterChildren
 * @type {function}
 * @description
 * Function to pass in a filter function to the children.
 * @param {object} node AST node
 * @param {function} filter Filter function
 * @return {object} node with modified children
 */
var filterChildren = function filterChildren(node, filter) {
  checkASTandFunction(node, 'node', filter, 'filter');

  if (['textnode', 'var', 'derived', 'data'].indexOf(node.type) > -1) {
    return node;
  }
  return Object.assign({}, node, {
    children: getChildren(node).filter(function (child) {
      return filter(child);
    })
  });
};

/**
 * @name modifyNodesByName
 * @description
 * Function to modfiy nodes based on the name property.
 * @param {object} ast
 * @param {string} name
 * @param {function} modifier
 * @return {object} ast
 */
var modifyNodesByName = function modifyNodesByName(ast, name, modifier) {
  typeCheckString(name, 'name');
  checkASTandFunction(ast, 'ast', modifier, 'modifier');

  var modifiedAST = [ast].map(function (node) {
    if (['textnode', 'var', 'derived', 'data'].indexOf(node.type) === -1) {
      node = Object.assign({}, node, {
        children: modifyHelper(getChildren(node), name.toLowerCase(), modifier)
      });
    }
    node = handleNodeByName(node, name, modifier);
    return node;
  });
  return modifiedAST[0];
};

//Helper function for modifyHelper.
function modifyHelper(children, name, modifier) {
  typeCheckString(name, 'name');
  //checkASTandFunction(, "ast", modifier, "modifier");

  return children.map(function (node) {
    if (['textnode', 'var', 'derived', 'data'].indexOf(node.type) === -1) {
      node = Object.assign({}, node, {
        children: modifyHelper(getChildren(node), name, modifier)
      });
    }
    node = handleNodeByName(node, name, modifier);
    return node;
  });
}

/**
 * @name handleNodeByName
 * @description
 * Function to modify a single node using a modifier and name property.
 * @param {Object} node
 * @param {string} name
 * @param {function} modifier
 * @return {object} if node.name = name then modifier(node), else node.
 */
var handleNodeByName = function handleNodeByName(node, name, modifier) {
  typeCheckString(name, 'name');
  checkASTandFunction(node, 'node', modifier, 'modifier');

  if (['textnode', 'var', 'derived', 'data'].indexOf(node.type) > -1) {
    return Object.assign({}, node);
  }
  if (node.name && node.name.toLowerCase() === name) {
    node = modifier(Object.assign({}, node));
  }
  return Object.assign({}, node);
};

/**
 * @name getNodeName
 * @description
 * Function to get the name of a componenet
 * @param {object}  node
 * @return {string} name of the passed node
 */
var getNodeName = function getNodeName(node) {
  typeCheckObject(node, 'node');
  //runValidator(node, "node");

  if (node.type !== 'component') {
    return node.type;
  }
  return node.name;
};
/**
 * @name getPropertyKeys
 * @description
 * Function to return a the list of property keys of a node
 * @param {object} node
 * @return {string[]} keys
 */
var getPropertyKeys = function getPropertyKeys(node) {
  typeCheckObject(node, 'node');
  runValidator(node, 'node');
  return Object.keys(node.properties);
};

/**
 * @name getProperty
 * @description
 * Getter function to a return a specific property of a node based on a key.
 * @param {object} node
 * @param {string} key
 * @return null, if the property does not exist, else property.data.
 */
var getProperty = function getProperty(node, key) {
  typeCheckString(key, 'key');
  typeCheckObject(node, 'node gp');
  runValidator(node, 'node');

  if (node.properties && node.properties.hasOwnProperty(key)) {
    return node.properties[key];
  }
  return null;
};

/**
 * @name getProperties
 * @description
 * Function to return all the properties of a given node.
 * @param {*} node
 * @return {object} properties of the node, or null if none exists,
 */
var getProperties = function getProperties(node) {
  typeCheckObject(node, 'node');
  runValidator(node, 'node');
  if (node.properties) {
    return node.properties;
  }
  return null;
};

/**
 * @name getPropertiesByType
 * @description
 * Function to get properties of a particular type of a given node.
 * @param {object} node
 * @param {string} type
 * @return {object[]} Array of properties if they exists, or an empty array of no properties of the given type exists.
 */
var getPropertiesByType = function getPropertiesByType(node, type) {
  checkType(type);
  typeCheckObject(node, 'node');
  runValidator(node, 'node');

  if (typeof type !== 'string' && ['value', 'expression', 'variable'].indexOf(type) === -1) {
    throw new error.InvalidParameterError('Type should be a value, expression or variable');
  }
  var res = [];
  if (node.properties) {
    for (var property in node.properties) {
      if (property.data.type === type) {
        res.push(property);
      }
    }
  }
  return res;
};

/**
 * @name prependNode
 * @description
 * Function to prepend a node in the children array of root.
 * @param {object} ast
 * @param {object} node
 * @return {object} modfied ast.
 */
var prependNode = function prependNode(ast, node) {
  checkASTandNode(ast, node);

  prependNodes(ast, [node]);
};

/**
 * @name prependNodes
 * @description
 * Function to prepend multiple nodes in the children array of root.
 * @param {object} ast
 * @param {object[]} nodes
 * @return {object} modfied ast.
 */
var prependNodes = function prependNodes(ast, nodes) {
  checkASTandNodeArray(ast, nodes);

  return Object.assign({}, ast, {
    children: [].concat(nodes, getChildren(ast))
  });
};

/**
 * @name removeNodesByName
 * @description
 * Function remove node with a particular name from the ast
 * @param {*} ast
 * @param {*} name
 */
var removeNodesByName = function removeNodesByName(ast, name) {
  typeCheckString(name, 'name');
  typeCheckObject(ast, 'ast');
  runValidator(ast, 'ast');

  if (hasChildren(ast)) {
    var children = getChildren(ast);
    ast = setChildren(ast, removeHelper(children, name));
  }
  return ast;
};

function removeHelper(children, name) {
  return children.filter(function (child) {
    if (getNodeName(child) === name) {
      return false;
    } else {
      return true;
    }
  }).map(function (child) {
    return setChildren(child, removeHelper(getChildren(child), name));
  });
}

/**
 * @name removeNodesByType
 * @description
 * Function remove node with a particular name from the ast
 * @param {*} ast
 * @param {*} type
 */
var removeNodesByType = function removeNodesByType(ast, type) {
  typeCheckString(type, 'type');
  typeCheckObject(ast, 'ast');
  runValidator(ast, 'ast');

  if (hasChildren(ast)) {
    var children = getChildren(ast);
    ast = setChildren(ast, removeByTypeHelper(children, type));
  }
  return ast;
};

function removeByTypeHelper(children, type) {
  return children.filter(function (child) {
    if (getType(child) === type) {
      return false;
    } else {
      return true;
    }
  }).map(function (child) {
    return setChildren(child, removeByTypeHelper(getChildren(child), type));
  });
}
/**
 * @name removeProperties
 * @description
 * Function to remove a property from a node
 * @param {object} node
 * @param {string} key
 * @return {object} Modified node
 */
var removeProperty = function removeProperty(node, key) {
  typeCheckString(key, 'key');
  typeCheckObject(node, 'node');
  runValidator(node, 'node');

  if (getProperties(node, key)) {
    var _newNode = Object.assign({}, node);
    delete _newNode.properties.key;
  }

  return newNode;
};

/* value ==> data */

/**
 * @name setProperty
 * @description
 * Function to add a property to a node or change the value if the property already exists.
 * @param {*} node
 * @param {*} name
 * @param {*} data
 * @return {object} Modfied Node
 */
var setProperty = function setProperty(node, name, data) {
  typeCheckString(key, 'key');
  typeCheckObject(data, 'data');
  typeCheckObject(node, 'node');
  runValidator(node, 'node');

  if ((typeof node === 'undefined' ? 'undefined' : _typeof(node)) !== 'object') {
    throw new error.InvalidParameterError('Parameter ast must be a well-defined JSON object.');
  }
  if (validator(node)) {
    throw new error.MalformedAstError('Parameter ast needs to be a JSON structure according to the schema.');
  }
  if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) !== 'object') {
    throw new error.InvalidParameterError('Parameter data must be a well-defined JSON object.');
  }
  if (typeof name !== 'string') {
    throw new error.InvalidParameterError('Parameter name must be a string.');
  }
  var newNode = Object.assign({}, node);
  if (newNode.properties) {
    newNode.properties[name] = data;
  }
  return newNode;
};

/**
 * @name setProperties
 * @description
 * Function to add multiple properties to a node
 * @param {object} node
 * @param {object} properties
 * @return {object} Modified node
 */
var setProperties = function setProperties(node, properties) {
  typeCheckObject(node, 'node');
  runValidator(node, 'node sp');
  checkProps(props);

  if ((typeof porperties === 'undefined' ? 'undefined' : _typeof(porperties)) !== 'object') {
    throw new error.InvalidParameterError('Parameter paramter must be a well-defined JSON object.');
  }
  if (validatorProps(properties)) {
    throw new error.InvalidParameterError('Paramete props is not a well-defined JSON according to the the AST schema. Look at schema.properties.properties!');
  }
  var newNode = Object.assign({}, node);
  if (newNode.properties) {
    newNode.properties = Object.assign({}, newNode.properties, properties);
  } else {
    newNode.properties = Object.assign({}, properties);
  }
  return newNode;
};

/**
 * @name walkNodes
 * @description
 * Function to do a depth-first traversal of the AST.
 * @param {object} ast  AST node
 * @param {function} f   callback function for each node.
 */
var walkNodes = function walkNodes(ast, f) {
  checkASTandFunction(ast, 'ast', f, 'f');
  walkNodesHelper(ast.children, f);
  f(ast);
};

//Helper function for walkNodes
function walkNodesHelper(astArray, f) {
  (astArray || []).forEach(function (node) {
    var children = getChildren(node);
    if (children.length > 0) {
      walkNodesHelper(children, f);
    }
    f(node);
  });
}

/**
 * @name walkNodeBreadthFirst
 * @description
 * Function to breadth-first traversal on the AST.
 * @param {object} ast
 * @param {function} f
 */
var walkNodesBreadthFirst = function walkNodesBreadthFirst(ast, f) {
  checkASTandFunction(ast, 'ast', f, 'f');
  f(ast);
  walkNodesBreadthFirstHelper(ast, f);
};

// Helper function for walkNodeBreadthFirst
function walkNodesBreadthFirstHelper(ast, f) {
  var childAst = [];
  (ast || []).forEach(function (node) {
    f(node);
    childAst = childAst.concat(getChildren(node));
  });
  if (childAst.length > 0) {
    walkNodesBreadthFirstHelper(childAst, f);
  }
}

/*
  Function to check for errors between ast and node variables
*/
function checkASTandNode(ast, node) {
  typeCheckObject(ast, 'ast');
  typeCheckObject(node, 'node');
  runValidator(ast, 'ast');
  runValidator(node, 'node');
}

/*
  Function to check for errors between ast and an array of nodes
*/
function checkASTandNodeArray(ast, nodes) {
  typeCheckObject(ast, 'ast');
  typeCheckArray(nodes, 'nodes');
  nodes.forEach(function (node, index) {
    typeCheckObject(node, 'nodes (index: ' + index + ')');
  });
  runValidator(ast, 'ast');
  nodes.forEach(function (node, index) {
    runValidator(node, 'nodes (index: ' + index + ')');
  });
}

/*
  Function to check for errors while creating a new Node
*/
function checkForCreateNode(id, name, type, props, children) {
  typeCheckInteger(id, 'id');
  typeCheckString(name, 'name');
  checkNodeType(type);
  checkProps(props);
  checkChildren(children);
}

/*
  Function to type-check for objects
*/
function typeCheckObject(param, paramName) {
  if ((typeof param === 'undefined' ? 'undefined' : _typeof(param)) !== 'object') {
    throw new error.InvalidParameterError('Parameter ' + paramName + ' must be a well defined JSON object. ' + 'Object: ' + param);
  }
}

/*
  Function to type check Integers
*/
function typeCheckInteger(param, paramName) {
  if (typeof param !== 'number') {
    throw new error.InvalidParameterError('Paramter: ' + paramName + 'must be an integer.');
  }
}

/*
  Function to type check strings
*/
function typeCheckString(param, paramName) {
  if (typeof param !== 'string') {
    throw new error.InvalidParameterError('Parameter' + param + 'must be a string.');
  }
}

/*
  Function to type check an array
*/
function typeCheckArray(array, arrayName) {
  if (!Array.isArray(array)) {
    throw new InvalidParameterError('Paramter ' + arrayName + ' must be an array. ' + 'Object: ' + param);
  }
}

function typeCheckFunction(func, name) {
  if (typeof func !== 'function') {
    throw new InvalidParameterError('Paramter ' + name + ' must be a Function. ' + 'Function: ' + func);
  }
}
/*
  Function to type check a function
*/
function checkASTandFunction(ast, astName, func, functionName) {
  typeCheckObject(ast, astName);
  typeCheckFunction(func, functionName);
  runValidator(ast, astName);
}

/*
 Function to check the type of a AST node
*/
function checkType(type) {
  typeCheckString(type, 'type');
  if (['value', 'expression', 'variable'].indexOf(type) === -1) {
    throw new error.InvalidParameterError('Type should be a value, expression or variable');
  }
}

/*
 Function to check type of a component
*/
function checkNodeType(type) {
  typeCheckString(type, 'type');
  if (['component', 'textnode', 'var', 'derived', 'data'].indexOf(type) === -1) {
    throw new error.InvalidParameterError('Type should be a component, textnode, var, derived or data');
  }
}
/*
  Function to check and validate properties paramter for a node
*/
function checkProps(props) {
  if (props) {
    typeCheckObject(props, 'props (Properties)');
    runPropsValidator(props);
  }
}

function checkChildren(children) {
  if (children) {
    typeCheckArray(children, 'children');
    children.forEach(function (child, index) {
      typeCheckObject(child, 'children (index: ' + index + ')');
    });
    children.forEach(function (child, index) {
      runValidator(child, 'children (index: ' + index + ')');
    });
  }
}

/*
  Function to validate AST structures
*/
function runValidator(param, paramName) {
  if (!validator(param)) {
    console.log('Error message from validator: ' + validator.errors[0].message);
    console.log('Error message from validator: ', validator.errors[0]);
    throw new error.MalformedAstError(paramName + ' must be well-defined and follow the AST schema. ' + 'Object: ' + JSON.stringify(param));
  }
}

/*
  Function to validate Properties for an AST structures.
*/
function runPropsValidator(props) {
  if (!validatorProps(props)) {
    console.log('Error message from validator: ' + validatorProps.errors[0].message);
    console.log('Error message from validator: ', validatorProps.errors[0]);
    throw new error.InvalidParameterError('Parameter props is not a well-defined JSON according to the the AST schema. Look at schema.properties.properties!');
  }
}

function propertyToString(property) {
  switch (property.type) {
    case 'value':
      return JSON.stringify(property.value);
    case 'expression':
      return '`' + property.value + '`';
    case 'variable':
      return property.value;
  }
}

function propertiesToString(node) {
  return Object.keys(node.properties || {}).reduce(function (memo, key) {
    return memo + (' ' + key + ':' + propertyToString(node.properties[key]));
  }, '').trim();
}

function childrenToMarkup(node, depth) {
  return (node.children || []).reduce(function (memo, child) {
    return memo + ('\n' + nodeToMarkup(child, depth));
  }, '');
}

function nodeToMarkup(node, depth) {
  switch (node.type) {
    case 'textnode':
      return '' + '  '.repeat(depth) + node.value;
    case 'component':
      if (node.name.toLowerCase() === 'textcontainer') {
        return '\n' + childrenToMarkup(node, depth) + '\n';
      }
      var propString = propertiesToString(node);
      if (hasChildren(node)) {
        return '  '.repeat(depth) + '[' + node.name + (propString ? ' ' + propString : '') + ']' + childrenToMarkup(node, depth + 1) + '\n' + '  '.repeat(depth) + '[/' + node.name + ']';
      }
      return '  '.repeat(depth) + '[' + node.name + (propString ? ' ' + propString : '') + ' /]';
    case 'var':
    case 'derived':
    case 'data':
    case 'meta':
      return '  '.repeat(depth) + '[' + node.type + ' ' + propertiesToString(node) + ' /]';
  }
}

/**
 * @name toMarkup
 * @description
 * Function to convert AST back to idyll markup
 * @param {object} ast  AST node
 * @return {string} Markup string
 */
function toMarkup(ast) {
  return childrenToMarkup(ast, 0).trim();
}

module.exports = {
  appendNode: appendNode,
  appendNodes: appendNodes,
  converters: converters,
  createNode: createNode,
  createTextNode: createTextNode,
  filterChildren: filterChildren,
  filterNodes: filterNodes,
  getChildren: getChildren,
  getNodesByName: getNodesByName,
  getNodesByType: getNodesByType,
  getNodeName: getNodeName,
  getPropertyKeys: getPropertyKeys,
  getProperty: getProperty,
  getProperties: getProperties,
  getPropertiesByType: getPropertiesByType,
  getText: getText,
  hasType: hasType,
  getType: getType,
  hasChildren: hasChildren,
  modifyChildren: modifyChildren,
  modifyNodesByName: modifyNodesByName,
  prependNode: prependNode,
  prependNodes: prependNodes,
  removeNodesByName: removeNodesByName,
  removeNodesByType: removeNodesByType,
  removeProperty: removeProperty,
  setChildren: setChildren,
  setProperty: setProperty,
  setProperties: setProperties,
  walkNodes: walkNodes,
  walkNodesBreadthFirst: walkNodesBreadthFirst,
  toMarkup: toMarkup
};