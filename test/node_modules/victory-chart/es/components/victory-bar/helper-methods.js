import _omit from "lodash/omit";
import _defaults from "lodash/defaults";
import _assign from "lodash/assign";

import { Helpers, LabelHelpers, Data, Domain, Scale } from "victory-core";

export default {
  getBarPosition: function (props, datum) {
    var getDefaultMin = function (axis) {
      var defaultMin = Scale.getType(props.scale[axis]) === "log" ? 1 / Number.MAX_SAFE_INTEGER : 0;
      return datum["_" + axis] instanceof Date ? new Date(defaultMin) : defaultMin;
    };
    var _y0 = datum._y0 !== undefined ? datum._y0 : getDefaultMin("y");
    var _x0 = datum._x0 !== undefined ? datum._x0 : getDefaultMin("x");
    return Helpers.scalePoint(props, _assign({}, datum, { _y0: _y0, _x0: _x0 }));
  },
  getBarStyle: function (datum, baseStyle) {
    var styleData = _omit(datum, ["xName", "yName", "x", "y", "label", "errorX", "errorY", "eventKey"]);
    return _defaults({}, styleData, baseStyle);
  },
  getCalculatedValues: function (props) {
    var theme = props.theme,
        horizontal = props.horizontal,
        polar = props.polar;

    var defaultStyles = theme && theme.bar && theme.bar.style ? theme.bar.style : {};
    var style = Helpers.getStyles(props.style, defaultStyles);
    var data = Data.getData(props);
    var range = {
      x: Helpers.getRange(props, "x"),
      y: Helpers.getRange(props, "y")
    };
    var domain = {
      x: Domain.getDomainWithZero(props, "x"),
      y: Domain.getDomainWithZero(props, "y")
    };
    var xScale = Scale.getBaseScale(props, "x").domain(domain.x).range(range.x);
    var yScale = Scale.getBaseScale(props, "y").domain(domain.y).range(range.y);
    var scale = {
      x: horizontal ? yScale : xScale,
      y: horizontal ? xScale : yScale
    };
    var origin = polar ? props.origin || Helpers.getPolarOrigin(props) : undefined;
    return { style: style, data: data, scale: scale, domain: domain, origin: origin };
  },
  getBaseProps: function (props, fallbackProps) {
    var _this = this;

    var modifiedProps = Helpers.modifyProps(props, fallbackProps, "bar");
    props = _assign({}, modifiedProps, this.getCalculatedValues(modifiedProps));
    var _props = props,
        alignment = _props.alignment,
        data = _props.data,
        domain = _props.domain,
        events = _props.events,
        height = _props.height,
        horizontal = _props.horizontal,
        origin = _props.origin,
        padding = _props.padding,
        polar = _props.polar,
        scale = _props.scale,
        sharedEvents = _props.sharedEvents,
        standalone = _props.standalone,
        style = _props.style,
        theme = _props.theme,
        width = _props.width;

    var initialChildProps = { parent: {
        domain: domain, scale: scale, width: width, height: height, data: data, standalone: standalone,
        theme: theme, polar: polar, origin: origin, padding: padding, style: style.parent
      } };

    return data.reduce(function (childProps, datum, index) {
      var eventKey = datum.eventKey || index;

      var _getBarPosition = _this.getBarPosition(props, datum),
          x = _getBarPosition.x,
          y = _getBarPosition.y,
          y0 = _getBarPosition.y0,
          x0 = _getBarPosition.x0;

      var barStyle = _this.getBarStyle(datum, style.data);
      var dataProps = {
        alignment: alignment, data: data, datum: datum, horizontal: horizontal, index: index, padding: padding, polar: polar, origin: origin,
        scale: scale, style: barStyle, width: width, height: height, x: x, y: y, y0: y0, x0: x0
      };

      childProps[eventKey] = {
        data: dataProps
      };

      var text = LabelHelpers.getText(props, datum, index);
      if (text !== undefined && text !== null || events || sharedEvents) {
        childProps[eventKey].labels = LabelHelpers.getProps(props, index);
      }
      return childProps;
    }, initialChildProps);
  }
};