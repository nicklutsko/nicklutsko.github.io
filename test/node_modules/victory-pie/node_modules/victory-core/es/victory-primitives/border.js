import _assign from "lodash/assign";

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React from "react";
import PropTypes from "prop-types";
import Helpers from "../victory-util/helpers";
import Collection from "../victory-util/collection";

import CommonProps from "./common-props";

var Line = function (_React$Component) {
  _inherits(Line, _React$Component);

  function Line() {
    _classCallCheck(this, Line);

    return _possibleConstructorReturn(this, (Line.__proto__ || Object.getPrototypeOf(Line)).apply(this, arguments));
  }

  _createClass(Line, [{
    key: "componentWillMount",
    value: function componentWillMount() {
      this.style = this.getStyle(this.props);
    }
  }, {
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps) {
      var _props = this.props,
          className = _props.className,
          x = _props.x,
          y = _props.y;

      var style = this.getStyle(nextProps);
      if (!Collection.allSetsEqual([[className, nextProps.className], [x, nextProps.x], [y, nextProps.y], [style, this.style]])) {
        this.style = style;
        return true;
      }
      return false;
    }
  }, {
    key: "getStyle",
    value: function getStyle(props) {
      var style = props.style,
          datum = props.datum,
          active = props.active;

      return Helpers.evaluateStyle(_assign({ fill: "none" }, style), datum, active);
    }

    // Overridden in victory-core-native

  }, {
    key: "renderBorder",
    value: function renderBorder(props, style, events) {
      var _props2 = this.props,
          role = _props2.role,
          shapeRendering = _props2.shapeRendering,
          className = _props2.className;

      return React.createElement("rect", _extends({}, props, {
        className: className,
        style: style,
        role: role || "presentation",
        shapeRendering: shapeRendering || "auto",
        vectorEffect: "non-scaling-stroke"
      }, events));
    }
  }, {
    key: "render",
    value: function render() {
      var _props3 = this.props,
          x = _props3.x,
          y = _props3.y,
          width = _props3.width,
          height = _props3.height,
          events = _props3.events;

      return this.renderBorder({ x: x, y: y, width: width, height: height }, this.style, events);
    }
  }]);

  return Line;
}(React.Component);

Line.propTypes = _extends({}, CommonProps, {
  height: PropTypes.number,
  width: PropTypes.number,
  x: PropTypes.number,
  y: PropTypes.number
});
export default Line;