var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React from "react";
import PropTypes from "prop-types";
import Helpers from "../victory-util/helpers";
import Collection from "../victory-util/collection";
import pathHelpers from "./path-helpers";
import CommonProps from "./common-props";

var Point = function (_React$Component) {
  _inherits(Point, _React$Component);

  function Point() {
    _classCallCheck(this, Point);

    return _possibleConstructorReturn(this, (Point.__proto__ || Object.getPrototypeOf(Point)).apply(this, arguments));
  }

  _createClass(Point, [{
    key: "componentWillMount",
    value: function componentWillMount() {
      var _calculateAttributes = this.calculateAttributes(this.props),
          style = _calculateAttributes.style,
          path = _calculateAttributes.path;

      this.style = style;
      this.path = path;
    }
  }, {
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps) {
      var _calculateAttributes2 = this.calculateAttributes(nextProps),
          style = _calculateAttributes2.style,
          path = _calculateAttributes2.path;

      var _props = this.props,
          className = _props.className,
          datum = _props.datum,
          x = _props.x,
          y = _props.y,
          size = _props.size,
          symbol = _props.symbol;

      if (!Collection.allSetsEqual([[className, nextProps.className], [x, nextProps.x], [y, nextProps.y], [size, nextProps.size], [symbol, nextProps.symbol], [path, this.path], [style, this.style], [datum, nextProps.datum]])) {
        this.style = style;
        this.path = path;
        return true;
      }
      return false;
    }
  }, {
    key: "calculateAttributes",
    value: function calculateAttributes(props) {
      var style = props.style,
          datum = props.datum,
          active = props.active;

      return {
        style: Helpers.evaluateStyle(style, datum, active),
        path: this.getPath(props)
      };
    }
  }, {
    key: "getPath",
    value: function getPath(props) {
      var datum = props.datum,
          active = props.active,
          x = props.x,
          y = props.y;

      var pathFunctions = {
        circle: pathHelpers.circle,
        square: pathHelpers.square,
        diamond: pathHelpers.diamond,
        triangleDown: pathHelpers.triangleDown,
        triangleUp: pathHelpers.triangleUp,
        plus: pathHelpers.plus,
        star: pathHelpers.star
      };
      var symbol = Helpers.evaluateProp(props.symbol, datum, active);
      var size = Helpers.evaluateProp(props.size, datum, active);
      var symbolFunction = typeof pathFunctions[symbol] === "function" ? pathFunctions[symbol] : pathFunctions.circle;
      return symbolFunction(x, y, size);
    }

    // Overridden in victory-core-native

  }, {
    key: "renderPoint",
    value: function renderPoint(path, style, events) {
      var _props2 = this.props,
          role = _props2.role,
          shapeRendering = _props2.shapeRendering,
          className = _props2.className;

      return React.createElement("path", _extends({}, events, {
        d: path,
        className: className,
        role: role || "presentation",
        shapeRendering: shapeRendering || "auto",
        style: style
      }));
    }
  }, {
    key: "render",
    value: function render() {
      return this.renderPoint(this.path, this.style, this.props.events);
    }
  }]);

  return Point;
}(React.Component);

Point.propTypes = _extends({}, CommonProps, {
  datum: PropTypes.object,
  size: PropTypes.oneOfType([PropTypes.number, PropTypes.func]),
  symbol: PropTypes.oneOfType([PropTypes.oneOf(["circle", "diamond", "plus", "square", "star", "triangleDown", "triangleUp"]), PropTypes.func]),
  x: PropTypes.number,
  y: PropTypes.number
});
export default Point;